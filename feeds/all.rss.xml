<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Lost in Transaction: All Posts</title>
  <description>Lost in Transaction: All Posts</description>
  <link>http://www.lostintransaction.com/index.html</link>
  <lastBuildDate>Fri, 07 Mar 2014 18:52:52 UTC</lastBuildDate>
  <pubDate>Fri, 07 Mar 2014 18:52:52 UTC</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Verifying Andreas's Dorian Nakamoto Fundraiser Message</title>
   <link>http://www.lostintransaction.com/blog/2014/03/07/verifying-andreas-s-dorian-nakamoto-fundraiser-message/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-lostintransaction-com:-blog-2014-03-07-verifying-andreas-s-dorian-nakamoto-fundraiser-message</guid>
   <pubDate>Fri, 07 Mar 2014 18:52:52 UTC</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.lostintransaction.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2014%2F03%2F07%2Fverifying-andreas-s-dorian-nakamoto-fundraiser-message%2F" height="1" width="1" /&gt;
 &lt;p&gt;Today, Andreas M. Antonopoulos, Chief Security Officer of Blockchain.info, started a &lt;a href="http://www.reddit.com/r/Bitcoin/comments/1ztjmg/andreas_im_fundraising_for_dorian_nakamoto/" title="Dorian fundraiser message on Reddit"&gt;fundraiser&lt;/a&gt; for Dorian Nakamoto, the guy who&amp;rsquo;s being harassed by the media due to Newsweek&amp;rsquo;s recent article about Satoshi Nakamoto. To prove that the message is not fake, Andreas &lt;a href="http://pastebin.com/4MHvpaeN" title="Dorian fundraiser message on Pastebin"&gt;signed the message&lt;/a&gt; with his public key. Since I&amp;rsquo;ve &lt;a href="http://www.lostintransaction.com/blog/2014/03/05/verifying-hashes-and-signatures/" title="Post: Verifying Hashes and Signatures"&gt;recently been playing with digital signatures&lt;/a&gt;, this seemed like a great chance to explore some more. Let&amp;rsquo;s try to to verify the message.&lt;/p&gt;
 &lt;p&gt;First, we need Andreas&amp;rsquo;s public key. I went to the &lt;a href="http://pgp.mit.edu/"&gt;MIT PGP Public Key Server&lt;/a&gt; and &lt;a href="http://pgp.mit.edu/pks/lookup?search=%22Andreas+M.+Antonopoulos%22&amp;amp;op=index" title="Andreas PGP key search results"&gt;searched for &lt;code&gt;"Andreas M. Antonopoulos"&lt;/code&gt;&lt;/a&gt;. There were several results, so I arbitrarily chose the one associated with his domain name:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;pub  4096R/2878DE4F 2013-12-14 Andreas M. Antonopoulos &amp;lt;andreas@antonopoulos.com&amp;gt;&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;I then added the key to my database using &lt;a href="http://www.gnupg.org/"&gt;GnuPG&lt;/a&gt;:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ gpg2.exe" --keyserver pgp.mit.edu --recv-keys 0x2878DE4F
gpg: requesting key 2878DE4F from hkp server pgp.mit.edu
gpg: key 2878DE4F: public key "Andreas M. Antonopoulos &amp;lt;andreas@antonopoulos.com&amp;gt;" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Next, I downloaded the &lt;a href="http://pastebin.com/download.php?i=4MHvpaeN" title="download message txt file"&gt;message from Pastebin&lt;/a&gt; and tried to verify it:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$gpg2.exe" --verify andreas_fundraising_for_dorian.txt
gpg: Signature made 03/07/14 12:26:34 Eastern Standard Time using RSA key ID B1632E74
gpg: Can't check signature: No public key&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Oops, I got the wrong key. The message is signed with key &lt;code&gt;B1632E74&lt;/code&gt; (Andreas&amp;rsquo;s Blockchain.info key) so let&amp;rsquo;s get that one:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ gpg2.exe" --keyserver pgp.mit.edu --recv-keys 0xB1632E74
gpg: requesting key B1632E74 from hkp server pgp.mit.edu
gpg: key B1632E74: public key "Andreas M. Antonopoulos (Blockchain.info CSO) &amp;lt;andreas@blockchain.info&amp;gt;" imported
gpg: no ultimately trusted keys found
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And now let&amp;rsquo;s try to verify:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ gpg2.exe" --verify andreas_fundraising_for_dorian.txt
gpg: Signature made 03/07/14 12:26:34 Eastern Standard Time using RSA key ID B1632E74
gpg: Good signature from "Andreas M. Antonopoulos (Blockchain.info CSO) &amp;lt;andreas@blockchain.info&amp;gt;"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: B40F E0EB 4316 82F5 A7BD  5B3B 339B 0210 B163 2E74&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Success!&lt;/p&gt;
 &lt;p&gt;One final issue. How do we know that &lt;em&gt;the&lt;/em&gt; Andreas Antonopoulos actually controls the &lt;code&gt;B1632E74&lt;/code&gt; key, and not someone posing as him, or someone else with the same name. As I mentioned in a &lt;a href="http://www.lostintransaction.com/blog/2014/03/05/verifying-hashes-and-signatures/" title="Post: Verifying Hashes and Signatures"&gt;previous post&lt;/a&gt;, there&amp;rsquo;s a few options:&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;
   &lt;p&gt;We can look in a central place that we trust. I checked &lt;a href="https://bitcoin.org/en"&gt;bitcoin.org&lt;/a&gt; and found the &lt;a href="https://bitcoin.org/en/development"&gt;PGP keys for several important people&lt;/a&gt; in the Bitcoin community. But no Andreas! I could not find anything on &lt;a href="https://blockchain.info"&gt;blockchain.info&lt;/a&gt; either.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;We can do an informal verification via &amp;ldquo;public consensus&amp;rdquo; by looking at &lt;a href="http://pgp.mit.edu/pks/lookup?op=vindex&amp;amp;search=0x339B0210B1632E74" title="Andreas Antonopoulos public key signatures"&gt;who else signed Andreas&amp;rsquo;s key&lt;/a&gt;. Unfortunately, there are not too many other signatures at the moment:&lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;uid Andreas M. Antonopoulos (Blockchain.info CSO) &amp;lt;andreas@blockchain.info&amp;gt;
sig  sig3  B1632E74 2014-01-22 __________ 2015-01-22 [selfsig]
sig  sig   2878DE4F 2014-01-22 __________ __________ Andreas M. Antonopoulos &amp;lt;andreas@antonopoulos.com&amp;gt;
sig  sig   CF8338F5 2014-03-07 __________ __________ Christopher David Howie &amp;lt;me@chrishowie.com&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;
 &lt;p&gt;Other than Andreas himself, there&amp;rsquo;s only one other person that is vouching for the key.&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;Luckily, Andreas anticipated this issue, and &lt;a href="http://www.youtube.com/watch?v=JCF1u1Wqfv0" title="Andreas PGP key YouTube video"&gt;issued a statement on YouTube&lt;/a&gt;, confirming his key. That confirms it! Now we are assured that the message is authentic.&lt;/li&gt;&lt;/ol&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Verifying Hashes and Signatures</title>
   <link>http://www.lostintransaction.com/blog/2014/03/05/verifying-hashes-and-signatures/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-lostintransaction-com:-blog-2014-03-05-verifying-hashes-and-signatures</guid>
   <pubDate>Wed, 05 Mar 2014 06:44:02 UTC</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.lostintransaction.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2014%2F03%2F05%2Fverifying-hashes-and-signatures%2F" height="1" width="1" /&gt;
 &lt;p&gt;Security is really important when handling bitcoins. Hashes and signatures can help by verifying that you&amp;rsquo;re downloading what you think you&amp;rsquo;re downloading.&lt;/p&gt;
 &lt;p&gt;In this post, I briefly explain hashes and signatures, and then check the hash and signature of the MultiBit wallet program, essentially following &lt;a href="https://multibit.org/blog/2013/07/24/how-to-check-signatures.html" title="MultiBit tutorial on hashes and signatures"&gt;the MultiBit tutorial on hashes and signatures&lt;/a&gt;. All examples are run in Windows 7 (64-bit).&lt;/p&gt;
 &lt;h3 id="verifying-hashes"&gt;Verifying Hashes&lt;/h3&gt;
 &lt;h4 id="a-first-example"&gt;&lt;em&gt;A first example&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;A hash function maps its input to a number. Any hash function may map various different inputs to the same number, but for certain &lt;a href="http://en.wikipedia.org/wiki/Cryptographic_hash_function" title="cryptographic hash function Wikipedia entry"&gt;&lt;em&gt;cryptographic&lt;/em&gt; hash functions&lt;/a&gt;, the probability of collision is so small that we can treat the hash function&amp;rsquo;s output as a unique identifier for the given input. The &lt;a href="http://en.wikipedia.org/wiki/SHA-1" title="SHA-1 Wikipedia entry"&gt;SHA&amp;ndash;1&lt;/a&gt; cryptographic hash function maps inputs to 160-bit numbers (40 hexadecial digits). Here&amp;rsquo;s the SHA&amp;ndash;1 hash (computed with Microsoft&amp;rsquo;s FCIV program) of the &lt;code&gt;"Hello world"&lt;/code&gt; example from the MultiBit tutorial:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ echo "Hello world" &amp;gt; example.txt
$ fciv -sha1 example.txt
//
// File Checksum Integrity Verifier version 2.05.
//
25e64db6d4d1d6116ffe0b317918c98f3624cbed example.txt&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Note that in Windows, the resulting hash differs from the tutorial (ie, when using Linux) because the generated Windows &lt;code&gt;examples.txt&lt;/code&gt; file has extra quotes, an extra space, and uses the windows &lt;code&gt;\r\n&lt;/code&gt; end-of-line instead of &lt;code&gt;\n&lt;/code&gt;. We can easily simulate the Linux version though, to get the same hash from the tutorial. Here I use a &lt;a href="http://racket-lang.org"&gt;Racket&lt;/a&gt; script:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(with-output-to-file "example.txt" (lambda () (display "Hello world\n")) #:exists 'replace)&lt;/code&gt;&lt;/pre&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3
&amp;gt; (with-output-to-file "example.txt" (lambda () (display "Hello world\n")) #:exists 'replace)
&amp;gt; (exit)
$ fciv -sha1 example.txt
//
// File Checksum Integrity Verifier version 2.05.
//
33ab5639bfd8e7b95eb1d8d0b87781d4ffea4d5d example.txt
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;&lt;a href="http://bitcoin.stackexchange.com/questions/14041/multibit-error-or-at-least-confusion-in-how-to-check-digital-signatures-in" title="Bitcoin StackExchange"&gt;It looks like I&amp;rsquo;m not the only person to notice the discrepancy&lt;/a&gt;.&lt;/p&gt;
 &lt;h4 id="computing-sha256"&gt;&lt;em&gt;Computing SHA&amp;ndash;256&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;Most software you download from the internet should provide a hash that you can verify to make sure the file was not corrupted or altered. For example, Multibit provides &lt;a href="http://en.wikipedia.org/wiki/SHA-2" title="SHA-256 Wikipedia entry"&gt;SHA&amp;ndash;256 hashes&lt;/a&gt; (256-bit output) in &lt;a href="https://multibit.org/releases/multibit-0.5.17/release.txt" title="MultiBit 0.5.17 release notes"&gt;the release notes&lt;/a&gt; (SHA&amp;ndash;256 is also the main hash function used in the &lt;a href="https://en.bitcoin.it/wiki/Protocol_specification#Common_standards" title="Bitcoin protocol"&gt;Bitcoin protocol&lt;/a&gt;).&lt;/p&gt;
 &lt;p&gt;Since FCIV only computes SHA&amp;ndash;1, we need something else that computes SHA&amp;ndash;256. A quick Google search finds the &lt;a href="http://md5deep.sourceforge.net/"&gt;&lt;code&gt;md5deep&lt;/code&gt; library&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;Since we are emphasizing security, let&amp;rsquo;s first make sure the program we just got is virus-free by &lt;a href="https://www.virustotal.com/en/file/eec0c765124b014c824db8759300f36b4a62b74ff81dfa68f77440389bb68d29/analysis/" title="sha256deep64.exe on virustotal"&gt;uploading to VirusTotal&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;VirusTotal also uses SHA&amp;ndash;256, to track which files it has seen, and we can check that the file we uploaded, &lt;code&gt;sha256deep64.exe&lt;/code&gt;, matches the file for which VirusTotal is reporting results, by running it on itself:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ sha256deep64 sha256deep64.exe
eec0c765124b014c824db8759300f36b4a62b74ff81dfa68f77440389bb68d29  sha256deep64.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Interestingly, &lt;code&gt;sha256deep64.exe&lt;/code&gt; and &lt;code&gt;sha1deep64.exe&lt;/code&gt; produce the same SHA&amp;ndash;256 hash:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ sha256deep64 sha1deep64.exe
eec0c765124b014c824db8759300f36b4a62b74ff81dfa68f77440389bb68d29  sha1deep64.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;No cause for concern though. Apparently this is &lt;a href="http://sourceforge.net/projects/md5deep/reviews/?offset=25" title="explanation of identical hash"&gt;intentional&lt;/a&gt; and the file determines its behavior based on its filename.&lt;/p&gt;
 &lt;h4 id="checking-multibits-hash"&gt;&lt;em&gt;Checking MultiBit&amp;rsquo;s hash&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;Now we&amp;rsquo;re finally ready to check the hash of the MultiBit program, specifically version 0.5.17 for Windows.&lt;/p&gt;
 &lt;p&gt;From the &lt;a href="https://multibit.org/releases/multibit-0.5.17/release.txt" title="MultiBit 0.5.17 release notes"&gt;release notes&lt;/a&gt;:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;SHA256 hashes for files:
90506bf43a64986ce8219ca0fb18a5e1f0776cfeb31043ca848cea7f71eda45d  multibit-0.5.17-windows-setup.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Computing the hash of the downloaded file:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ sha256deep64 multibit-0.5.17-windows-setup.exe
90506bf43a64986ce8219ca0fb18a5e1f0776cfeb31043ca848cea7f71eda45d  multibit-0.5.17-windows-setup.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And it matches!&lt;/p&gt;
 &lt;h3 id="verifying-signatures"&gt;Verifying Signatures&lt;/h3&gt;
 &lt;h4 id="a-very-brief-introduction"&gt;&lt;em&gt;A very brief introduction&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;Verifying the hash only ensures that nothing happened to the file during the download. For example, you can be pretty sure that no one intercepted your download and then sent you a hacked version. But what if the website you downloaded from was hacked in the first place, so both the file and the hash were fake?&lt;/p&gt;
 &lt;p&gt;This is where &lt;a href="http://en.wikipedia.org/wiki/Digital_signature" title="digital signature Wikipedia entry"&gt;digital signatures&lt;/a&gt; can help. Briefly, to prove that a file was not tampered with, the distributor of the file &amp;ldquo;signs&amp;rdquo; the file with a secret key that only they know. The distributor then posts the file, the signature, and a public key that is calculated from the private key. The downloader then uses the public key and signature to verify the downloaded file.&lt;/p&gt;
 &lt;p&gt;In a secure signature system, it&amp;rsquo;s impossible to determine the private key from the public key. Also, the verification process is only successful if the downloaded file was originally signed with the private key, which is only known by the distributor of the file. In other words, in a secure system, it&amp;rsquo;s computationally impossible to forge a valid signature without knowledge of the private key.&lt;/p&gt;
 &lt;h5 id="note"&gt;NOTE:&lt;/h5&gt;
 &lt;p&gt;Verifying a signature does not guarantee that the file you downloaded was not tampered with. If you don&amp;rsquo;t know the person distributing the file, then you might not be able to distinguish between a legitimate file-signature-public-key set from a bad one. However, a reliable signature system often relies on additional knowledge about the public key you are using.&lt;/p&gt;
 &lt;p&gt;For example, the public key could be confirmed by a central authority or key server that does additional checks to link keys to people. Or the other person, and their public key, may be well known, and so the &amp;ldquo;confirmation&amp;rdquo; in this case would be an informal public consensus. None of these methods guarantees authenticity, but they&amp;rsquo;re a lot more difficult to fool.&lt;/p&gt;
 &lt;h4 id="checking-multibits-signature"&gt;&lt;em&gt;Checking MultiBit&amp;rsquo;s signature&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy" title="PGP Wikipedia entry"&gt;PGP&lt;/a&gt; is a well-known signature system, which we&amp;rsquo;ll use to check verify MultiBit&amp;rsquo;s signature.&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;
   &lt;p&gt;First we download &lt;a href="http://www.gnupg.org/" title="GnuPG"&gt;GnuPG&lt;/a&gt;, &lt;a href="http://www.gnupg.org/" title="GnuPG for Windows"&gt;for Windows&lt;/a&gt;,  specifically Gpg4win-Vanilla, version 2.2.1. Of course we first  check the hash for a match.&lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;$ sha1deep64 gpg4win-vanilla-2.2.1.exe
6d229b03ec2dcbb54a40f7590d108dc0cbcb5aac  gpg4win-vanilla-2.2.1.exe&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;Then, following the MultiBit tutorial, we get the public key for  Jim Burton, MultiBit developer, from a known key server.&lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;$ gpg2.exe" --keyserver pgp.mit.edu -- recv-keys 0x79F7C572
gpg: requesting key 79F7C572 from hkp server pgp.mit.edu
gpg: .../AppData/Roaming/gnupg/trustdb.gpg: trustdb created
gpg: key 79F7C572: public key "Jim Burton (multibit.org developer) &amp;lt;jim618@fastmail.co.uk&amp;gt;" imported
gpg: no ultimately trusted keys found
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;Then we download the &lt;a href="https://multibit.org/releases/multibit-0.5.17/multibit-0.5.17-windows-setup.exe.asc" title="MultiBit signature file"&gt;signature file&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;Finally, we can verify that Jim signed the file we&amp;rsquo;re downloading  and that it hasn&amp;rsquo;t been tampered with.&lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;$ gpg2.exe" --verify multibit-0.5.17-windows-setup.exe.asc
gpg: Signature made 03/03/14 06:09:34 Eastern Standard Time using RSA key ID 23F7FB7B
gpg: Good signature from "Jim Burton (multibit.org developer) &amp;lt;jim618@fastmail.co.uk&amp;gt;"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 299C 423C 672F 47F4 756A  6BA4 C197 2AED 79F7 C572
     Subkey fingerprint: 4A71 A836 F572 01B4 D088  7D60 0820 A658 23F7 FB7B&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;
 &lt;p&gt;The warning means that we have never seen Jim&amp;rsquo;s public key, and nor has anyone that we trust (the &lt;code&gt;gpg&lt;/code&gt; program keeps track of people we trust, which is no one at the moment). This key server uses the &lt;a href="http://en.wikipedia.org/wiki/Web_of_trust" title="web of trust Wikipedia entry"&gt;public consensus confirmation strategy&lt;/a&gt; described above. Here, a person&amp;rsquo;s public key can be signed by others and in this way, these other people vouch that this is indeed Jim&amp;rsquo;s key. Of course, it could still be that lots of people have teamed up to deceive you, and have signed a fake version of Jim&amp;rsquo;s key. As the key accumulates more signatures, however, the likelihood that it is fake does down.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>A 2012 blog post</title>
   <link>http://www.lostintransaction.com/blog/2012/01/01/a-2012-blog-post/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-lostintransaction-com:-blog-2012-01-01-a-2012-blog-post</guid>
   <pubDate>Sun, 01 Jan 2012 00:00:00 UTC</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.lostintransaction.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2012%2F01%2F01%2Fa-2012-blog-post%2F" height="1" width="1" /&gt;
 &lt;p&gt;Here is an example blog post.&lt;/p&gt;
 &lt;p&gt;Everything after this paragraph &amp;ldquo;after the break&amp;rdquo;. On index pages and Atom feeds, it will become &amp;ldquo;Continue reading&amp;hellip;&amp;rdquo;, if you configure them to include only the summary &amp;ldquo;blurb&amp;rdquo; before the break.&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;some code&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Here&amp;rsquo;s some &lt;a href="http://bullshitipsum.com/?paragraphs=2"&gt;Bullshit Ipsum&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;Addelivery integrate ecologies e-markets standards-compliant utilize technologies aggregate addelivery viral&amp;mdash;communities dynamic functionalities. Mindshare engineer viral A-list: cross-platform remix engage social cross-media social innovate distributed matrix experiences monetize utilize innovative. Action-items transition recontextualize sexy Cluetrain envisioneer, &amp;ldquo;vortals communities evolve technologies sexy methodologies.&amp;rdquo; Enhance grow compelling iterate architect matrix plug-and-play reinvent scale, distributed incentivize, extend.&lt;/p&gt;
 &lt;p&gt;Revolutionary proactive. Target; envisioneer e-services sticky robust morph users methodologies, markets content supply-chains, granular monetize reinvent harness initiatives. Plug-and-play productize vortals integrate compelling aggregate, user-contributed, integrate web-enabled grow extend mindshare, repurpose world-class harness next-generation eyeballs solutions blogospheres extend. Rss-capable methodologies, &amp;ldquo;vortals vertical,&amp;rdquo; synthesize real-time user-contributed impactful utilize architect deploy ROI redefine design proactive strategic user-centric.&lt;/p&gt;
 &lt;p&gt;Here&amp;rsquo;s a footnote&lt;sup&gt;&lt;a href="#2012-01-01-a-2012-blog-post-footnote-1-definition" name="2012-01-01-a-2012-blog-post-footnote-1-return"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
 &lt;h2 id="code-blocks"&gt;Code blocks&lt;/h2&gt;
 &lt;p&gt;Frog optionally uses &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; if it&amp;rsquo;s installed to do syntax highlighting. In your markdown using backtick code blocks you can specify a language:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;```language
some racket code
```&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;That name is given to Pygments as the lexer to use.&lt;/p&gt;
 &lt;p&gt;For example this:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;```js
/**
 * Some JavaScript
 */
function foo()
{
    if (counter &amp;lt;= 10)
        return;
    // it works!
```&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Yields this:&lt;/p&gt;
 &lt;pre class="brush: js"&gt;&lt;code&gt;/**
 * Some JavaScript
 */
function foo()
{
    if (counter &amp;lt;= 10)
        return;
    // it works!&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And this:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;```racket
#lang racket
;; Finds Racket sources in all subdirs
(for ([path (in-directory)])
  (when (regexp-match? #rx"[.]rkt$" path)
    (printf "source file: ~a\n" path)))
(symbol-&amp;gt;string 'foo)
```&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Yields this:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;#lang racket
;; Finds Racket sources in all subdirs
(for ([path (in-directory)])
  (when (regexp-match? #rx"[.]rkt$" path)
    (printf "source file: ~a\n" path)))
(symbol-&amp;gt;string 'foo)&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Notice that, for Racket, symbols with unambiguous documentation (provided by one library, or provided by several where one is &lt;code&gt;racket&lt;/code&gt; or &lt;code&gt;racket/base&lt;/code&gt;) are links to that documentation.&lt;/p&gt;
 &lt;p&gt;This also works outside fenced code blocks, for symbols in backticks immediately followed by &lt;code&gt;[racket]&lt;/code&gt;. Example: &lt;code class="brush: racket"&gt;printf&lt;/code&gt;. This isn&amp;rsquo;t official Markdown; it&amp;rsquo;s simply a pun on link syntax and fenced code block languages. This is similar to using &lt;code&gt;@racket[printf]&lt;/code&gt; in Scribble.&lt;/p&gt;
 &lt;p&gt;&lt;code class="brush: racket"&gt;symbol-&amp;gt;string&lt;/code&gt;.&lt;/p&gt;
 &lt;p&gt;Here is a lambda: λ.&lt;/p&gt;
 &lt;p&gt;Here is a lambda in code backticks: &lt;code&gt;λ&lt;/code&gt;.&lt;/p&gt;
 &lt;p&gt;And here in indented code block:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And here in fenced code block, no lang specified:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And here in fenced code block, lang = &lt;code&gt;racket&lt;/code&gt;:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And here in fenced code block, lang = &lt;code&gt;scheme&lt;/code&gt;:&lt;/p&gt;
 &lt;pre class="brush: scheme"&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Here&amp;rsquo;s a simple &lt;code&gt;for&lt;/code&gt; macro, written in &lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html"&gt;Racket&lt;/a&gt;:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define-syntax-rule (for (x e1) e2)
  (for-each (λ (x) e2) e1))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The end.&lt;/p&gt;
 &lt;div class="footnotes"&gt;
  &lt;ol&gt;
   &lt;li id="2012-01-01-a-2012-blog-post-footnote-1-definition" class="footnote-definition"&gt;
    &lt;p&gt;Footnote definition.&amp;nbsp;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/html&gt;</description></item></channel></rss>