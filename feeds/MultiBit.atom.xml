<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Lost in Transaction: A neophyte explores Bitcoin: Posts tagged 'MultiBit'</title>
 <link rel="self" href="http://www.lostintransaction.com/feeds/MultiBit.atom.xml" />
 <link href="http://www.lostintransaction.com/tags/MultiBit.html" />
 <id>urn:http-www-lostintransaction-com:-tags-MultiBit-html</id>
 <updated>2014-04-09T03:02:03Z</updated>
 <entry>
  <title type="text">Computing a Bitcoin Address, Part 4: Wallet Import Format (WIF)</title>
  <link rel="alternate" href="http://www.lostintransaction.com/blog/2014/04/09/computing-a-bitcoin-address-part-4-wallet-import-format-wif/?utm_source=MultiBit&amp;utm_medium=Atom" />
  <id>urn:http-www-lostintransaction-com:-blog-2014-04-09-computing-a-bitcoin-address-part-4-wallet-import-format-wif</id>
  <published>2014-04-09T03:02:03Z</published>
  <updated>2014-04-09T03:02:03Z</updated>
  <author>
   <name>The Unknown Author</name></author>
  <content type="html">
&lt;html&gt;&lt;img src="http://www.lostintransaction.com/img/1x1.gif?utm_source=MultiBit&amp;amp;utm_medium=Atom&amp;amp;utm_campaign=%2Fblog%2F2014%2F04%2F09%2Fcomputing-a-bitcoin-address-part-4-wallet-import-format-wif%2F" height="1" width="1" /&gt;
 &lt;p&gt;In previous posts, we figured out how to compute a Bitcoin address from a private key and we tested our code with an &lt;a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses" title="Bitcoin wiki: Bitcoin addresses"&gt;example from the Bitcoin wiki&lt;/a&gt;. In this post we try to convert a private key from a real wallet (MultiBit) to its corresponding address.&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;This is the fourth post in a four-part series titled &amp;ldquo;Computing a Bitcoin Address&amp;rdquo;. Here are all the articles in the series:&lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;Part 1: &lt;a href="http://www.lostintransaction.com/blog/2014/03/14/computing-a-bitcoin-address-part-1-private-to-public-key/"&gt;Private to Public Key&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;Part 2: &lt;a href="http://www.lostintransaction.com/blog/2014/03/15/computing-a-bitcoin-address-part-2-public-key-to-hex-address/"&gt;Public Key to (Hex) Address&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;Part 3: &lt;a href="http://www.lostintransaction.com/blog/2014/03/18/computing-a-bitcoin-address-part-3-base58check-encoding/"&gt;Base58Check Encoding&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;Part 4: &lt;a href="http://www.lostintransaction.com/blog/2014/04/09/computing-a-bitcoin-address-part-4-wallet-import-format-wif/"&gt;Wallet Import Format (WIF)&lt;/a&gt; (this post)&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
 &lt;h3 id="from-private-key-to-public-address"&gt;From Private Key to Public Address&lt;/h3&gt;
 &lt;p&gt;Let&amp;rsquo;s consolidate the code from the previous posts to create one function that performs all the steps to convert a private key to a public address. First we create some helper functions:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define (hash160/hex hstr) (ripemd160/hex (sha256/hex hstr)))
(define (sha256x2/hex hstr) (sha256/hex (sha256/hex hstr)))
(define (add-version0 str) (string-append "00" str))
;; checksum is 1st 4 bytes (8 chars) of double sha256 hash of given hex string
(define (get-checksum hstr) (substring hstr 0 8))
(define (compute-checksum hstr) (get-checksum (sha256x2/hex hstr)))
(define (add-checksum hstr) (string-append hstr (compute-checksum hstr)))&lt;/code&gt;&lt;/pre&gt;
 &lt;ul&gt;
  &lt;li&gt;&lt;code&gt;hash160/hex&lt;/code&gt;: performs a SHA&amp;ndash;256 hash followed by a RIPEMD&amp;ndash;160 hash on an input hex string&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;sha256x2/hex&lt;/code&gt;: performs SHA&amp;ndash;256 twice on an input hex string&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;add-version0&lt;/code&gt;: prepends &lt;code&gt;0x00&lt;/code&gt; to a hex string&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;compute-checksum&lt;/code&gt;: computes checksum (first 4 bytes of a double SHA&amp;ndash;245 hash) of its input&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;add-checksum&lt;/code&gt;: computes a checksum for its input and appends that checksum to the end of the input&lt;/li&gt;&lt;/ul&gt;
 &lt;p&gt;Here&amp;rsquo;s a function &lt;code&gt;priv-key-&amp;gt;addr&lt;/code&gt; that converts a private key (in hex) to a public address (in Base58Check):&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;;; computes base58 addr from hex priv key
(define priv-key-&amp;gt;addr
  (compose hex-str-&amp;gt;base58-str
           add-checksum
           add-version0
           hash160/hex
           priv-key-&amp;gt;pub-key))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;We use Racket&amp;rsquo;s &lt;code&gt;compose&lt;/code&gt; function, which strings together a series of functions. The functions are called in the reverse order in which they are listed, so &lt;code&gt;priv-key-&amp;gt;addr&lt;/code&gt; first calls &lt;code&gt;priv-key-&amp;gt;pub-key&lt;/code&gt; on its input, then takes that results and give it to &lt;code&gt;hash160/hex&lt;/code&gt;, and so on.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s test this function on &lt;a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses" title="Bitcoin wiki: Bitcoin addresses"&gt;the Bitcoin wiki example&lt;/a&gt;:&lt;/p&gt;
 &lt;ul&gt;
  &lt;li&gt;private key: &lt;code&gt;18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;public address: &lt;code&gt;16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p&gt;We save the code to the file &lt;code&gt;priv2addr.rkt&lt;/code&gt;:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "priv2addr.rkt")
-&amp;gt; (define priv-key "18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725")
-&amp;gt; (priv-key-&amp;gt;addr priv-key)
"16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM"&lt;/code&gt;&lt;/pre&gt;
 &lt;h3 id="a-multibit-wallet"&gt;A MultiBit Wallet&lt;/h3&gt;
 &lt;p&gt;Now let&amp;rsquo;s test our function on a real private key. I created a new wallet in MultiBit and it generated address &lt;code&gt;1G9dbCmxtbaBQACVgcHWHJgyr8ZNCiVL9j&lt;/code&gt;. I then exported the private key associated with this address into a file. Here&amp;rsquo;s the contents of that file:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;# KEEP YOUR PRIVATE KEYS SAFE !
# Anyone who can read this file can spend your bitcoin.
#
# Format:
#   &amp;lt;Base58 encoded private key&amp;gt;[&amp;lt;whitespace&amp;gt;[&amp;lt;key createdAt&amp;gt;]]
#
#   The Base58 encoded private keys are the same format as
#   produced by the Satoshi client/ sipa dumpprivkey utility.
#
#   Key createdAt is in UTC format as specified by ISO 8601
#   e.g: 2011-12-31T16:42:00Z . The century, 'T' and 'Z' are mandatory
#
L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe` 2014-03-10T06:12:28Z
# End of private keys&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Let&amp;rsquo;s see if we can convert this private key (&lt;code&gt;L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe&lt;/code&gt;) to its public address (&lt;code&gt;1G9dbCmxtbaBQACVgcHWHJgyr8ZNCiVL9j&lt;/code&gt;). The key is in base&amp;ndash;58 so we need convert to hex first.&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "priv2addr.rkt" "base58.rkt")
-&amp;gt; (define priv/base58 "L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe")
-&amp;gt; (define priv/hex (base58-str-&amp;gt;hex-str priv/base58))
-&amp;gt; (priv-key-&amp;gt;addr priv/hex)
"1GoZxLR83RfoZeqzNSdTZuEb4vHAc6zFfc"
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Hmm, we get the wrong address! Querying the private key at &lt;a href="http://bitaddress.org"&gt;bitaddress.org&lt;/a&gt; reveals that the private key is&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;in &lt;a href="https://en.bitcoin.it/wiki/Wallet_import_format" title="Wallet import format"&gt;Wallet Import Format (WIF)&lt;/a&gt;, and&lt;/li&gt;
  &lt;li&gt;in compressed form.&lt;/li&gt;&lt;/ol&gt;
 &lt;p&gt;Here&amp;rsquo;s the relevant details of Wallet Import Format:&lt;/p&gt;
 &lt;p&gt;Uncompressed WIF private key:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;0x80 + 32 byte raw private key + 4 byte checksum
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Compressed WIF private key:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;0x80 + 32 byte raw private key + 0x01 + 4 byte checksum
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The &lt;code&gt;0x80&lt;/code&gt; prefix indicates an address on the main Bitcoin blockchain (as opposed to the testnet). The compressed form has an extra &lt;code&gt;0x01&lt;/code&gt; byte before the checksum.&lt;/p&gt;
 &lt;h3 id="wif-checksum-checking"&gt;WIF Checksum Checking&lt;/h3&gt;
 &lt;p&gt;Before converting the WIF private key to an address, let&amp;rsquo;s first write a function that checks the checksum for a WIF private key. We need to first determine if a WIF private key is compressed:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;;; wif is in base58
(define (wif-compressed? wif)
  (define len (string-length wif))
    (when (not (or (= len 51) (= len 52)))
      (error 'wif-compressed? "invalid WIF: ~a\n" wif))
  (define c (string-ref wif 0))
  (or (char=? c #\K) (char=? c #\L)))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;A compressed WIF private key begins with a &lt;code&gt;K&lt;/code&gt; or &lt;code&gt;L&lt;/code&gt; and &lt;code&gt;wif-compressed?&lt;/code&gt; checks for this.&lt;/p&gt;
 &lt;p&gt;Next we define a prediate that verifies a WIF private key&amp;rsquo;s checksum. The checksum is again computed with a double SHA&amp;ndash;256.&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;;; splits wif into prefix + checksum
;; wif is in base58 but results are in  hex
(define (wif-split-checksum wif)
  (define wif/hex (base58-str-&amp;gt;hex-str wif))
  (cond [(wif-compressed? wif)
         (values (substring wif/hex 0 68) (substring wif/hex 68 76))]
        [else
         (values (substring wif/hex 0 66) (substring wif/hex 66 74))]))

(define (hex=? str1 str2) (string=? (string-upcase str1) (string-upcase str2)))

;; wif is in base58
(define (wif-checksum-ok? wif)
  (define-values (wif-prefix wif-checksum) (wif-split-checksum wif))
  (hex=? wif-checksum (compute-checksum wif-prefix)))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;First, &lt;code&gt;wif-split-checksum&lt;/code&gt; splits a WIF private key into a prefix and a checksum. Then, &lt;code&gt;wif-checksum-ok?&lt;/code&gt; computes a double SHA&amp;ndash;256 on the prefix and verifies that it matches the checksum.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s try these functions on our example:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (define wif/comp "L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe")
-&amp;gt; (wif-checksum-ok? wif/comp)
#t
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;We can also try on the uncompressed WIF private key, which according to &lt;a href="https://www.bitaddress.org"&gt;bitaddress.org&lt;/a&gt;, is &lt;code&gt;5KDwznXNT8sJbhtYheFNB1ho9Yb69hfJGgmTkW9cNVBr7LxFEje&lt;/code&gt;.&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;-&amp;gt; (define wif/uncomp "5KDwznXNT8sJbhtYheFNB1ho9Yb69hfJGgmTkW9cNVBr7LxFEje")
-&amp;gt; (wif-checksum-ok? wif/uncomp)
#t
&lt;/code&gt;&lt;/pre&gt;
 &lt;h3 id="from-wif-private-key-to-address"&gt;From WIF Private Key to Address&lt;/h3&gt;
 &lt;p&gt;To convert from a WIF private key to an address, we need to:&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;decide whether the WIF private key is compressed,&lt;/li&gt;
  &lt;li&gt;extract the raw private key, and&lt;/li&gt;
  &lt;li&gt;compute either an uncompressed or compressed Bitcoin address.&lt;/li&gt;&lt;/ol&gt;
 &lt;p&gt;We have already defined code for step 1. For step 2, we just drop all prefixes and checksums from the WIF private key:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;;; wif is in base58, priv key is in hex
(define (wif-&amp;gt;priv-key wif) (substring (base58-str-&amp;gt;hex-str wif) 2 66))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;To verify, let&amp;rsquo;s check the hash160 of our running example, which &lt;a href="https://blockchain.info/address/1G9dbCmxtbaBQACVgcHWHJgyr8ZNCiVL9j" title="blockchain.info 1G9dbCmxtbaBQACVgcHWHJgyr8ZNCiVL9j"&gt;blockchain.info reports to be&lt;/a&gt; &lt;code&gt;a62bc20c511af7160a6150a72042b3fff8a86646&lt;/code&gt;:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "priv2addr.rkt" "priv2pub.rkt")
-&amp;gt; (define wif "L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe")
-&amp;gt; (wif-&amp;gt;priv-key wif)
"B96CA0C6390D4734C80A44ECD4ACEF21E2886BA250EC1D8CF461F1C94FAE6EA9"
-&amp;gt; (priv-key-&amp;gt;pub-key/compressed ^)
"036eef34887c91e2ed2815de2192bd541867708bb1c7434cd571073ddecaaafc42"
-&amp;gt; (hash160/hex ^)
"a62bc20c511af7160a6150a72042b3fff8a86646"&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;For step 3, we first need a compressed version of our &lt;code&gt;priv-key-&amp;gt;addr&lt;/code&gt; function. This requires getting a compressed public key, but fortunately we&amp;rsquo;ve already defined a &lt;code&gt;priv-key-&amp;gt;pub-key/compressed&lt;/code&gt; in a &lt;a href="http://www.lostintransaction.com/blog/2014/03/14/computing-a-bitcoin-address-part-1-private-to-public-key/" title="Computing a Bitcoin Address, Part 1: Private to Public Key"&gt;previous post&lt;/a&gt;. Here&amp;rsquo;s &lt;code&gt;priv-key-&amp;gt;addr/compressed&lt;/code&gt;:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;;; computes base58 addr from compressed (hex) priv key
(define priv-key-&amp;gt;addr/compressed
  (compose hex-str-&amp;gt;base58-str
           add-checksum
           add-version0
           hash160/hex
           priv-key-&amp;gt;pub-key/compressed))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Finally, we can define &lt;code&gt;wif-&amp;gt;addr&lt;/code&gt;, which converts a WIF private key to a Bitcoin address:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;;; wif and addr are base58
(define (wif-&amp;gt;addr wif)
  (define priv (wif-&amp;gt;priv-key wif))
  (if (wif-compressed? wif)
      (priv-key-&amp;gt;addr/compressed priv)
      (priv-key-&amp;gt;addr priv)))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Here&amp;rsquo;s our example, with the expected representations (from &lt;a href="https://www.bitaddress.org"&gt;bitaddress.org&lt;/a&gt;):&lt;/p&gt;
 &lt;ul&gt;
  &lt;li&gt;WIF private key, compressed: &lt;code&gt;L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;public address, compressed: &lt;code&gt;1G9dbCmxtbaBQACVgcHWHJgyr8ZNCiVL9j&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;WIF private key, uncompressed: &lt;code&gt;5KDwznXNT8sJbhtYheFNB1ho9Yb69hfJGgmTkW9cNVBr7LxFEje&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;public address, uncompressed: &lt;code&gt;15YzfXwEg5STm3GtEh87LAyzNbpVpdx5eN&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p&gt;Let&amp;rsquo;s test that our code gives the expected results:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "priv2addr.rkt")
-&amp;gt; (define wif/comp "L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe")
-&amp;gt; (wif-&amp;gt;addr wif/comp)
"1G9dbCmxtbaBQACVgcHWHJgyr8ZNCiVL9j"
-&amp;gt; (define wif/uncomp "5KDwznXNT8sJbhtYheFNB1ho9Yb69hfJGgmTkW9cNVBr7LxFEje")
-&amp;gt; (wif-&amp;gt;addr wif/uncomp)
"15YzfXwEg5STm3GtEh87LAyzNbpVpdx5eN"
&lt;/code&gt;&lt;/pre&gt;
 &lt;h3 id="software"&gt;Software&lt;/h3&gt;
 &lt;p&gt;All the code from this post &lt;a href="http://www.lostintransaction.com/code/priv2addr.rkt"&gt;is available here&lt;/a&gt;. In this post, I&amp;rsquo;m using Racket 6.0.0.3, running in Debian 7.0.&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Verifying Hashes and Signatures</title>
  <link rel="alternate" href="http://www.lostintransaction.com/blog/2014/03/05/verifying-hashes-and-signatures/?utm_source=MultiBit&amp;utm_medium=Atom" />
  <id>urn:http-www-lostintransaction-com:-blog-2014-03-05-verifying-hashes-and-signatures</id>
  <published>2014-03-05T06:44:02Z</published>
  <updated>2014-03-05T06:44:02Z</updated>
  <author>
   <name>The Unknown Author</name></author>
  <content type="html">
&lt;html&gt;&lt;img src="http://www.lostintransaction.com/img/1x1.gif?utm_source=MultiBit&amp;amp;utm_medium=Atom&amp;amp;utm_campaign=%2Fblog%2F2014%2F03%2F05%2Fverifying-hashes-and-signatures%2F" height="1" width="1" /&gt;
 &lt;p&gt;Security is really important when handling bitcoins. Hashes and signatures can help by verifying that you&amp;rsquo;re downloading what you think you&amp;rsquo;re downloading.&lt;/p&gt;
 &lt;p&gt;In this post, I briefly explain hashes and signatures, and then check the hash and signature of the MultiBit wallet program, essentially following &lt;a href="https://multibit.org/blog/2013/07/24/how-to-check-signatures.html" title="MultiBit tutorial on hashes and signatures"&gt;the MultiBit tutorial on hashes and signatures&lt;/a&gt;. All examples are run in Windows 7 (64-bit).&lt;/p&gt;
 &lt;h3 id="verifying-hashes"&gt;Verifying Hashes&lt;/h3&gt;
 &lt;h4 id="a-first-example"&gt;&lt;em&gt;A first example&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;A hash function maps its input to a number. Any hash function may map various different inputs to the same number, but for certain &lt;a href="http://en.wikipedia.org/wiki/Cryptographic_hash_function" title="cryptographic hash function Wikipedia entry"&gt;&lt;em&gt;cryptographic&lt;/em&gt; hash functions&lt;/a&gt;, the probability of collision is so small that we can treat the hash function&amp;rsquo;s output as a unique identifier for the given input. The &lt;a href="http://en.wikipedia.org/wiki/SHA-1" title="SHA-1 Wikipedia entry"&gt;SHA&amp;ndash;1&lt;/a&gt; cryptographic hash function maps inputs to 160-bit numbers (40 hexadecial digits). Here&amp;rsquo;s the SHA&amp;ndash;1 hash (computed with Microsoft&amp;rsquo;s FCIV program) of the &lt;code&gt;"Hello world"&lt;/code&gt; example from the MultiBit tutorial:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ echo "Hello world" &amp;gt; example.txt
$ fciv -sha1 example.txt
//
// File Checksum Integrity Verifier version 2.05.
//
25e64db6d4d1d6116ffe0b317918c98f3624cbed example.txt&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Note that in Windows, the resulting hash differs from the tutorial (ie, when using Linux) because the generated Windows &lt;code&gt;examples.txt&lt;/code&gt; file has extra quotes, an extra space, and uses the windows &lt;code&gt;\r\n&lt;/code&gt; end-of-line instead of &lt;code&gt;\n&lt;/code&gt;. We can easily simulate the Linux version though, to get the same hash from the tutorial. Here I use a &lt;a href="http://racket-lang.org"&gt;Racket&lt;/a&gt; script:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(with-output-to-file "example.txt" (lambda () (display "Hello world\n")) #:exists 'replace)&lt;/code&gt;&lt;/pre&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3
&amp;gt; (with-output-to-file "example.txt" (lambda () (display "Hello world\n")) #:exists 'replace)
&amp;gt; (exit)
$ fciv -sha1 example.txt
//
// File Checksum Integrity Verifier version 2.05.
//
33ab5639bfd8e7b95eb1d8d0b87781d4ffea4d5d example.txt
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;&lt;a href="http://bitcoin.stackexchange.com/questions/14041/multibit-error-or-at-least-confusion-in-how-to-check-digital-signatures-in" title="Bitcoin StackExchange"&gt;It looks like I&amp;rsquo;m not the only person to notice the discrepancy&lt;/a&gt;.&lt;/p&gt;
 &lt;h4 id="computing-sha256"&gt;&lt;em&gt;Computing SHA&amp;ndash;256&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;Most software you download from the internet should provide a hash that you can verify to make sure the file was not corrupted or altered. For example, Multibit provides &lt;a href="http://en.wikipedia.org/wiki/SHA-2" title="SHA-256 Wikipedia entry"&gt;SHA&amp;ndash;256 hashes&lt;/a&gt; (256-bit output) in &lt;a href="https://multibit.org/releases/multibit-0.5.17/release.txt" title="MultiBit 0.5.17 release notes"&gt;the release notes&lt;/a&gt; (SHA&amp;ndash;256 is also the main hash function used in the &lt;a href="https://en.bitcoin.it/wiki/Protocol_specification#Common_standards" title="Bitcoin protocol"&gt;Bitcoin protocol&lt;/a&gt;).&lt;/p&gt;
 &lt;p&gt;Since FCIV only computes SHA&amp;ndash;1, we need something else that computes SHA&amp;ndash;256. A quick Google search finds the &lt;a href="http://md5deep.sourceforge.net/"&gt;&lt;code&gt;md5deep&lt;/code&gt; library&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;Since we are emphasizing security, let&amp;rsquo;s first make sure the program we just got is virus-free by &lt;a href="https://www.virustotal.com/en/file/eec0c765124b014c824db8759300f36b4a62b74ff81dfa68f77440389bb68d29/analysis/" title="sha256deep64.exe on virustotal"&gt;uploading to VirusTotal&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;VirusTotal also uses SHA&amp;ndash;256, to track which files it has seen, and we can check that the file we uploaded, &lt;code&gt;sha256deep64.exe&lt;/code&gt;, matches the file for which VirusTotal is reporting results, by running it on itself:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ sha256deep64 sha256deep64.exe
eec0c765124b014c824db8759300f36b4a62b74ff81dfa68f77440389bb68d29  sha256deep64.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Interestingly, &lt;code&gt;sha256deep64.exe&lt;/code&gt; and &lt;code&gt;sha1deep64.exe&lt;/code&gt; produce the same SHA&amp;ndash;256 hash:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ sha256deep64 sha1deep64.exe
eec0c765124b014c824db8759300f36b4a62b74ff81dfa68f77440389bb68d29  sha1deep64.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;No cause for concern though. Apparently this is &lt;a href="http://sourceforge.net/projects/md5deep/reviews/?offset=25" title="explanation of identical hash"&gt;intentional&lt;/a&gt; and the file determines its behavior based on its filename.&lt;/p&gt;
 &lt;h4 id="checking-multibits-hash"&gt;&lt;em&gt;Checking MultiBit&amp;rsquo;s hash&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;Now we&amp;rsquo;re finally ready to check the hash of the MultiBit program, specifically version 0.5.17 for Windows.&lt;/p&gt;
 &lt;p&gt;From the &lt;a href="https://multibit.org/releases/multibit-0.5.17/release.txt" title="MultiBit 0.5.17 release notes"&gt;release notes&lt;/a&gt;:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;SHA256 hashes for files:
90506bf43a64986ce8219ca0fb18a5e1f0776cfeb31043ca848cea7f71eda45d  multibit-0.5.17-windows-setup.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Computing the hash of the downloaded file:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ sha256deep64 multibit-0.5.17-windows-setup.exe
90506bf43a64986ce8219ca0fb18a5e1f0776cfeb31043ca848cea7f71eda45d  multibit-0.5.17-windows-setup.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And it matches!&lt;/p&gt;
 &lt;h3 id="verifying-signatures"&gt;Verifying Signatures&lt;/h3&gt;
 &lt;h4 id="a-very-brief-introduction"&gt;&lt;em&gt;A very brief introduction&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;Verifying the hash only ensures that nothing happened to the file during the download. For example, you can be pretty sure that no one intercepted your download and then sent you a hacked version. But what if the website you downloaded from was hacked in the first place, so both the file and the hash were fake?&lt;/p&gt;
 &lt;p&gt;This is where &lt;a href="http://en.wikipedia.org/wiki/Digital_signature" title="digital signature Wikipedia entry"&gt;digital signatures&lt;/a&gt; can help. Briefly, to prove that a file was not tampered with, the distributor of the file &amp;ldquo;signs&amp;rdquo; the file with a secret key that only they know. The distributor then posts the file, the signature, and a public key that is calculated from the private key. The downloader then uses the public key and signature to verify the downloaded file.&lt;/p&gt;
 &lt;p&gt;In a secure signature system, it&amp;rsquo;s impossible to determine the private key from the public key. Also, the verification process is only successful if the downloaded file was originally signed with the private key, which is only known by the distributor of the file. In other words, in a secure system, it&amp;rsquo;s computationally impossible to forge a valid signature without knowledge of the private key.&lt;/p&gt;
 &lt;h5 id="note"&gt;NOTE:&lt;/h5&gt;
 &lt;p&gt;Verifying a signature does not guarantee that the file you downloaded was not tampered with. If you don&amp;rsquo;t know the person distributing the file, then you might not be able to distinguish between a legitimate file-signature-public-key set from a bad one. However, a reliable signature system often relies on additional knowledge about the public key you are using.&lt;/p&gt;
 &lt;p&gt;For example, the public key could be confirmed by a central authority or key server that does additional checks to link keys to people. Or the other person, and their public key, may be well known, and so the &amp;ldquo;confirmation&amp;rdquo; in this case would be an informal public consensus. None of these methods guarantees authenticity, but they&amp;rsquo;re a lot more difficult to fool.&lt;/p&gt;
 &lt;h4 id="checking-multibits-signature"&gt;&lt;em&gt;Checking MultiBit&amp;rsquo;s signature&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy" title="PGP Wikipedia entry"&gt;PGP&lt;/a&gt; is a well-known signature system, which we&amp;rsquo;ll use to check verify MultiBit&amp;rsquo;s signature.&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;
   &lt;p&gt;First we download &lt;a href="http://www.gnupg.org/" title="GnuPG"&gt;GnuPG&lt;/a&gt;, &lt;a href="http://www.gnupg.org/" title="GnuPG for Windows"&gt;for Windows&lt;/a&gt;,  specifically Gpg4win-Vanilla, version 2.2.1. Of course we first  check the hash for a match.&lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;$ sha1deep64 gpg4win-vanilla-2.2.1.exe
6d229b03ec2dcbb54a40f7590d108dc0cbcb5aac  gpg4win-vanilla-2.2.1.exe&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;Then, following the MultiBit tutorial, we get the public key for  Jim Burton, MultiBit developer, from a known key server.&lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;$ gpg2.exe" --keyserver pgp.mit.edu -- recv-keys 0x79F7C572
gpg: requesting key 79F7C572 from hkp server pgp.mit.edu
gpg: .../AppData/Roaming/gnupg/trustdb.gpg: trustdb created
gpg: key 79F7C572: public key "Jim Burton (multibit.org developer) &amp;lt;jim618@fastmail.co.uk&amp;gt;" imported
gpg: no ultimately trusted keys found
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;Then we download the &lt;a href="https://multibit.org/releases/multibit-0.5.17/multibit-0.5.17-windows-setup.exe.asc" title="MultiBit signature file"&gt;signature file&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;Finally, we can verify that Jim signed the file we&amp;rsquo;re downloading  and that it hasn&amp;rsquo;t been tampered with.&lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;$ gpg2.exe" --verify multibit-0.5.17-windows-setup.exe.asc
gpg: Signature made 03/03/14 06:09:34 Eastern Standard Time using RSA key ID 23F7FB7B
gpg: Good signature from "Jim Burton (multibit.org developer) &amp;lt;jim618@fastmail.co.uk&amp;gt;"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 299C 423C 672F 47F4 756A  6BA4 C197 2AED 79F7 C572
     Subkey fingerprint: 4A71 A836 F572 01B4 D088  7D60 0820 A658 23F7 FB7B&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;
 &lt;p&gt;The warning means that we have never seen Jim&amp;rsquo;s public key, and nor has anyone that we trust (the &lt;code&gt;gpg&lt;/code&gt; program keeps track of people we trust, which is no one at the moment). This key server uses the &lt;a href="http://en.wikipedia.org/wiki/Web_of_trust" title="web of trust Wikipedia entry"&gt;public consensus confirmation strategy&lt;/a&gt; described above. Here, a person&amp;rsquo;s public key can be signed by others and in this way, these other people vouch that this is indeed Jim&amp;rsquo;s key. Of course, it could still be that lots of people have teamed up to deceive you, and have signed a fake version of Jim&amp;rsquo;s key. As the key accumulates more signatures, however, the likelihood that it is fake does down.&lt;/p&gt;&lt;/html&gt;</content></entry></feed>