<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Lost in Transaction: Posts tagged 'signatures'</title>
 <link rel="self" href="http://www.lostintransaction.com/feeds/signatures.atom.xml" />
 <link href="http://www.lostintransaction.com/tags/signatures.html" />
 <id>urn:http-www-lostintransaction-com:-tags-signatures-html</id>
 <updated>2014-03-05T06:44:02Z</updated>
 <entry>
  <title type="text">Verifying Hashes and Signatures</title>
  <link rel="alternate" href="http://www.lostintransaction.com/blog/2014/03/05/verifying-hashes-and-signatures/?utm_source=signatures&amp;utm_medium=Atom" />
  <id>urn:http-www-lostintransaction-com:-blog-2014-03-05-verifying-hashes-and-signatures</id>
  <published>2014-03-05T06:44:02Z</published>
  <updated>2014-03-05T06:44:02Z</updated>
  <author>
   <name>The Unknown Author</name></author>
  <content type="html">
&lt;html&gt;&lt;img src="http://www.lostintransaction.com/img/1x1.gif?utm_source=signatures&amp;amp;utm_medium=Atom&amp;amp;utm_campaign=%2Fblog%2F2014%2F03%2F05%2Fverifying-hashes-and-signatures%2F" height="1" width="1" /&gt;
 &lt;p&gt;Security is really important when handling bitcoins. One easy safeguard is to make sure you&amp;rsquo;re downloading what you think you&amp;rsquo;re downloading using hashes and signatures.&lt;/p&gt;
 &lt;p&gt;In this post, I check the hash and signature of MultiBit, essentially following &lt;a href="https://multibit.org/blog/2013/07/24/how-to-check-signatures.html" title="MultiBit tutorial on hashes and signatures"&gt;the MultiBit tutorial on hashes and signatures&lt;/a&gt;. All examples are run in Windows 7 (64-bit).&lt;/p&gt;
 &lt;h3 id="verifying-hashes"&gt;Verifying Hashes&lt;/h3&gt;
 &lt;h4 id="a-first-example"&gt;&lt;em&gt;A first example&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;A hash function maps its input to a number. The &lt;a href="http://en.wikipedia.org/wiki/SHA-1" title="SHA-1 Wikipedia entry"&gt;SHA&amp;ndash;1&lt;/a&gt; hash function maps inputs to 160-bit numbers (40 hexadecial digits). Here&amp;rsquo;s the SHA&amp;ndash;1 hash (computed with Microsoft&amp;rsquo;s FCIV program) of the &lt;code&gt;"Hello
world"&lt;/code&gt; example from the MultiBit tutorial:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ echo "Hello world" &amp;gt; example.txt
$ fciv -sha1 example.txt
//
// File Checksum Integrity Verifier version 2.05.
//
25e64db6d4d1d6116ffe0b317918c98f3624cbed example.txt&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Note that in Windows, the resulting hash differs from the tutorial (ie, when using Linux) because the Windows &lt;code&gt;examples.txt&lt;/code&gt; file has extra quotes, an extra space, and uses the windows &lt;code&gt;\r\n&lt;/code&gt; end-of-line instead of &lt;code&gt;\n&lt;/code&gt;. We can easily simulate the Linux version though. Here I use a &lt;a href="http://racket-lang.org"&gt;Racket&lt;/a&gt; script:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(with-output-to-file "example.txt" (lambda () (display "Hello world\n")) #:exists 'replace)&lt;/code&gt;&lt;/pre&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3
&amp;gt; (with-output-to-file "example.txt" (lambda () (display "Hello world\n")) #:exists 'replace)
&amp;gt; (exit)
$ fciv -sha1 example.txt
//
// File Checksum Integrity Verifier version 2.05.
//
33ab5639bfd8e7b95eb1d8d0b87781d4ffea4d5d example.txt
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;&lt;a href="http://bitcoin.stackexchange.com/questions/14041/multibit-error-or-at-least-confusion-in-how-to-check-digital-signatures-in" title="Bitcoin StackExchange"&gt;It looks like I&amp;rsquo;m not the only person that noticed the discrepancy&lt;/a&gt;.&lt;/p&gt;
 &lt;h4 id="computing-sha256"&gt;&lt;em&gt;Computing SHA&amp;ndash;256&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;Most software you download from the internet should provide a hash that you can verify to make sure the file was not corrupted or altered. For example, Multibit provides &lt;a href="http://en.wikipedia.org/wiki/SHA-2" title="SHA-256 Wikipedia entry"&gt;SHA&amp;ndash;256 hashes&lt;/a&gt; (256-bits) in &lt;a href="https://multibit.org/releases/multibit-0.5.17/release.txt" title="MultiBit 0.5.17 release notes"&gt;the release notes&lt;/a&gt; (SHA&amp;ndash;256 is also the main hash function used in the &lt;a href="https://en.bitcoin.it/wiki/Protocol_specification#Common_standards"&gt;Bitcoin protocol&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;&amp;ldquo;Bitcoin protocol&amp;rdquo;&lt;/p&gt;
 &lt;p&gt;Since FCIV only does SHA&amp;ndash;1, we need something else that computes SHA&amp;ndash;256. A quick Google search finds the &lt;a href="http://md5deep.sourceforge.net/"&gt;&lt;code&gt;md5deep&lt;/code&gt; library&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;Since we are focusing on security, let&amp;rsquo;s make sure the program we just got is virus-free by &lt;a href="https://www.virustotal.com/en/file/eec0c765124b014c824db8759300f36b4a62b74ff81dfa68f77440389bb68d29/analysis/" title="sha256deep64.exe on virustotal"&gt;uploading to VirusTotal&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;VirusTotal also uses SHA&amp;ndash;1, to track which files it has seen, and we can check that the file we uploaded, &lt;code&gt;sha256deep64.exe&lt;/code&gt;, matches the file for which VirusTotal is reporting results:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ sha256deep64 sha256deep64.exe
eec0c765124b014c824db8759300f36b4a62b74ff81dfa68f77440389bb68d29  sha256deep64.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Interestingly, &lt;code&gt;sha256deep64.exe&lt;/code&gt; and &lt;code&gt;sha1deep64.exe&lt;/code&gt; produce the same SHA&amp;ndash;256 hash:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ sha256deep64 sha1deep64.exe
eec0c765124b014c824db8759300f36b4a62b74ff81dfa68f77440389bb68d29  sha1deep64.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;No cause for concern though. Apparently this is [intentional][samehash] and the file determines its behavior based on its filename.&lt;/p&gt;
 &lt;p&gt;[samehash][http://sourceforge.net/projects/md5deep/reviews/?offset=25]  &amp;ldquo;explanation of identical hash&amp;rdquo;&lt;/p&gt;
 &lt;h4 id="checking-multibits-hash"&gt;&lt;em&gt;Checking MultiBit&amp;rsquo;s hash&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;Now we&amp;rsquo;re finally ready to check the hash of MultiBit 0.5.17 for Windows.&lt;/p&gt;
 &lt;p&gt;From the &lt;a href="https://multibit.org/releases/multibit-0.5.17/release.txt" title="MultiBit 0.5.17 release notes"&gt;release notes&lt;/a&gt;:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;SHA256 hashes for files:
90506bf43a64986ce8219ca0fb18a5e1f0776cfeb31043ca848cea7f71eda45d  multibit-0.5.17-windows-setup.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Computing the hash of the downloaded file:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ sha256deep64.exe multibit-0.5.17-windows-setup.exe
90506bf43a64986ce8219ca0fb18a5e1f0776cfeb31043ca848cea7f71eda45d  multibit-0.5.17-windows-setup.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And it matches!&lt;/p&gt;
 &lt;h3 id="verifying-signatures"&gt;Verifying Signatures&lt;/h3&gt;
 &lt;h4 id="a-very-brief-introduction"&gt;&lt;em&gt;A very brief introduction&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;Verifying the hash only ensures that nothing happened to the file during the download. For example, you can be pretty sure that no one intercepted your download and then sent you a hacked version. But what if the website you downloaded from was hacked in the first place, so both the file and the has were fake?&lt;/p&gt;
 &lt;p&gt;This is where &lt;a href="http://en.wikipedia.org/wiki/Digital_signature"&gt;digital signatures&lt;/a&gt; can help. Briefly, to prove that a file was not tampered with, the distributor of the file &amp;ldquo;signs&amp;rdquo; the file with a secret key that only they know. The distributor then posts the file, the signature, and a public key that is calculated from the private key. The downloader then uses the public and signature to verify the downloaded file.&lt;/p&gt;
 &lt;p&gt;In a secure signature system, it&amp;rsquo;s impossible to determine the private key from the public key. Also, the verification process is only successful if the downloaded file was originally signed with the private key, which is only known by the distributor of the file. In other words, in a secure system, it&amp;rsquo;s computationally impossible to forge a valid signature without knowledge of the private key.&lt;/p&gt;
 &lt;p&gt;&amp;ldquo;digital signature Wikipedia entry&amp;rdquo;&lt;/p&gt;
 &lt;h5 id="note"&gt;NOTE:&lt;/h5&gt;
 &lt;p&gt;Verifying a signature does not guarantee that the file you downloaded was not tampered with. If you don&amp;rsquo;t know the person distributing the file, then you wouldn&amp;rsquo;t be able to distinguish between a legitamate file-signature-public key set from a bad one. However, the system relies on additional knowledge about the public key you are using.&lt;/p&gt;
 &lt;p&gt;For example, the public key could be confirmed by a central authority or key server that does additional checks to link keys to people. Or the other person, and their public key, may be well known, and so the &amp;ldquo;confirmation&amp;rdquo; in this case would be an informal public consensus. None of these methods guarantees authenticity, but it&amp;rsquo;s a lot more difficult to fool.&lt;/p&gt;
 &lt;h4 id="checking-multibits-signature"&gt;&lt;em&gt;Checking MultiBit&amp;rsquo;s signature&lt;/em&gt;&lt;/h4&gt;
 &lt;p&gt;A well-known signature system is &lt;a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy" title="PGP Wikipedia entry"&gt;PGP&lt;/a&gt;, which we&amp;rsquo;ll use to check verify MultiBit&amp;rsquo;s signature.&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;
   &lt;p&gt;First we download &lt;a href="http://www.gnupg.org/" title="GnuPG"&gt;GnuPG&lt;/a&gt; &lt;a href="http://www.gnupg.org/" title="GnuPG for Windows"&gt;for Windows&lt;/a&gt;, specifically Gpg4win-Vanilla 2.2.1. Of course we check the hash first:&lt;/p&gt;
   &lt;p&gt;$ sha1deep64 gpg4win-vanilla&amp;ndash;2.2.1.exe 6d229b03ec2dcbb54a40f7590d108dc0cbcb5aac gpg4win-vanilla&amp;ndash;2.2.1.exe&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
 &lt;p&gt;and make sure &lt;a href="http://gpg4win.org/download.html" title="Gpg4win download and hashes"&gt;it matches&lt;/a&gt;, which it does.&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;
   &lt;p&gt;Then, following the MultiBit tutorial, we get the public key for Jim Burton, MultiBit developer, from a key server.&lt;/p&gt;
   &lt;p&gt;$ gpg2.exe" &amp;mdash;keyserver pgp.mit.edu &amp;mdash; recv-keys 0x79F7C572  gpg: requesting key 79F7C572 from hkp server pgp.mit.edu  gpg: &amp;hellip;/AppData/Roaming/gnupg/trustdb.gpg: trustdb created  gpg: key 79F7C572: public key &amp;ldquo;Jim Burton (multibit.org developer) &lt;a href="mailto:jim618@fastmail.co.uk"&gt;jim618@fastmail.co.uk&lt;/a&gt;&amp;rdquo; imported  gpg: no ultimately trusted keys found  gpg: Total number processed: 1  gpg: imported: 1 (RSA: 1)&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;Then we download the &lt;a href="https://multibit.org/releases/multibit-0.5.17/multibit-0.5.17-windows-setup.exe.asc" title="MultiBit signature file"&gt;signature file&lt;/a&gt;.&lt;/li&gt;&lt;/ol&gt;
 &lt;ol&gt;
  &lt;li&gt;
   &lt;p&gt;Finally, we can verify that Jim signed the file we&amp;rsquo;re downloading and that it hasn&amp;rsquo;t been tampered with.&lt;/p&gt;
   &lt;p&gt;$ gpg2.exe" &amp;mdash;verify multibit&amp;ndash;0.5.17-windows-setup.exe.asc gpg: Signature made 03/03/14 06:09:34 Eastern Standard Time using RSA key ID 23F7FB7B gpg: Good signature from &amp;ldquo;Jim Burton (multibit.org developer) &lt;a href="mailto:jim618@fastmail.co.uk"&gt;jim618@fastmail.co.uk&lt;/a&gt;&amp;rdquo; gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: 299C 423C 672F 47F4 756A 6BA4 C197 2AED 79F7 C572  Subkey fingerprint: 4A71 A836 F572 01B4 D088 7D60 0820 A658 23F7 FB7B&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
 &lt;p&gt;The warning means that we have never seen Jim&amp;rsquo;s public key, and nor has anyone that we trust. This key server uses the public-based key confirmation strategy described above. A person&amp;rsquo;s public keys can be signed by other people and in this way, each of these people are vouching that this is Jim&amp;rsquo;s key. Of course, it could still be that lots of people have teamed up to deceive you. As the key accumulates more signatures, however, the likelihood that it is fake does down. Also, the GnuPG program keeps track of keys of people you trust and lets you know if one of these people have signed Jim&amp;rsquo;s key.&lt;/p&gt;&lt;/html&gt;</content></entry></feed>