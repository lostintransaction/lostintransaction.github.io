<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Lost in Transaction: A neophyte explores Bitcoin: Posts tagged 'elliptic curve'</title>
  <description>Lost in Transaction: A neophyte explores Bitcoin: Posts tagged 'elliptic curve'</description>
  <link>http://www.lostintransaction.com/tags/elliptic-curve.html</link>
  <lastBuildDate>Fri, 14 Mar 2014 05:28:01 UTC</lastBuildDate>
  <pubDate>Fri, 14 Mar 2014 05:28:01 UTC</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Deriving a Bitcoin Public Key From a Private Key</title>
   <link>http://www.lostintransaction.com/blog/2014/03/14/deriving-a-bitcoin-public-key-from-a-private-key/?utm_source=elliptic-curve&amp;utm_medium=RSS</link>
   <guid>urn:http-www-lostintransaction-com:-blog-2014-03-14-deriving-a-bitcoin-public-key-from-a-private-key</guid>
   <pubDate>Fri, 14 Mar 2014 05:28:01 UTC</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.lostintransaction.com/img/1x1.gif?utm_source=elliptic-curve&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2014%2F03%2F14%2Fderiving-a-bitcoin-public-key-from-a-private-key%2F" height="1" width="1" /&gt;
 &lt;p&gt;I&amp;rsquo;ve been wondering about the relationship between Bitcoin public and private keys. I&amp;rsquo;ve seen the &lt;a href="http://stackoverflow.com/questions/12480776/how-do-i-obtain-the-public-key-from-an-ecdsa-private-key-in-openssl" title="Stack Overflow: Public Key from Private Key"&gt;&lt;code&gt;Q = dG&lt;/code&gt; explanation&lt;/a&gt; but it leaves out a few too many details for my tastes. This post describes how to derive a public key from a private key with conrete, runnable C code.&lt;/p&gt;
 &lt;p&gt;The Stack Overflow post says that in the &lt;code&gt;Q = dG&lt;/code&gt; equation, &lt;code&gt;Q&lt;/code&gt; is the public key and &lt;code&gt;d&lt;/code&gt; is the private key, but does not explain &lt;code&gt;G&lt;/code&gt;, the group parameter. Luckily, some Googling quickly finds that Bitcoin uses the &lt;a href="https://en.bitcoin.it/wiki/Secp256k1" title="secp256k1 Bitcoin wiki entry"&gt;&lt;code&gt;secp256k1&lt;/code&gt; ECDSA curve&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;Next, I started by looking at the OpenSSL &lt;code&gt;libcrypto&lt;/code&gt; library, at the &lt;a href="http://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=crypto/ec/ec_key.c;h=7fa247593d91b45347704e62e184e1138fc8bd01;hb=46ebd9e3bb623d3c15ef2203038956f3f7213620#l236" title="crypto/ec/ec_key.c"&gt;function mentioned in the Stack Overflow post&lt;/a&gt;, &lt;code&gt;EC_KEY_generate_key&lt;/code&gt;. Here&amp;rsquo;s the line that performs the multiplication again:&lt;/p&gt;
 &lt;pre class="brush: c"&gt;&lt;code&gt;EC_POINT_mul(eckey-&amp;gt;group, pub_key, priv_key, NULL, NULL, ctx);&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The &lt;code&gt;priv_key&lt;/code&gt; is known and the &lt;code&gt;pub_key&lt;/code&gt; is an output parameter, so we just need to pass in the appropriate group as the first parameter. OpenSSL has &lt;a href="http://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=crypto/objects/obj_mac.h;h=b5ea7cdab4f84b90280f0a3aae1478a8d715c7a7;hb=46ebd9e3bb623d3c15ef2203038956f3f7213620#l385" title="crypto/objects/obj_mac.h"&gt;already defined the &lt;code&gt;secp256k1&lt;/code&gt; curve&lt;/a&gt; (in &lt;code&gt;crypto/objects/obj_mac.h&lt;/code&gt;), so it&amp;rsquo;s just a matter of finding the right calls. In this case, we want &lt;a href="http://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=crypto/ec/ec_curve.c;h=c72fb2697ca2823a4aac36b027012bed6c457288;hb=46ebd9e3bb623d3c15ef2203038956f3f7213620#l2057" title="crypco/ec/ec_curve.c"&gt;&lt;code&gt;EC_GROUP_new_by_curve_name&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;Here&amp;rsquo;s what my public-from-private-key function looks like:&lt;/p&gt;
 &lt;pre class="brush: c"&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;openssl/ec.h&amp;gt;
#include &amp;lt;openssl/obj_mac.h&amp;gt; // for NID_secp256k1

#define PRIV_KEY_LENGTH 32
#define PUB_KEY_LENGTH 65

void hex2bytes(const unsigned char *in, size_t len, unsigned char *out) {
  for(size_t i=0; i&amp;lt;len; i++,in+=2) sscanf(in, "%2hhx", out+i);
}

void print_chars(unsigned char *in, size_t len) {
  for(size_t i=0; i&amp;lt;len; i++) printf("%c",in[i]); printf("\n");
}
       
unsigned char *priv2pub(const unsigned char *priv_hex, size_t len) {
  const EC_GROUP *ecgroup = EC_GROUP_new_by_curve_name(NID_secp256k1);
  unsigned char privkey_bytes[PRIV_KEY_LENGTH];
  hex2bytes(priv_hex, PRIV_KEY_LENGTH, privkey_bytes);
  const BIGNUM *privkey_bn = BN_bin2bn(privkey_bytes, len, NULL);
  EC_POINT *pub_key = EC_POINT_new(ecgroup);
  EC_POINT_mul(ecgroup, pub_key, privkey_bn, NULL, NULL, NULL);
  return EC_POINT_point2hex(ecgroup, pub_key, POINT_CONVERSION_UNCOMPRESSED, NULL);
}

int main() {
  const unsigned char privkey_hex[] = "18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725";
  print_chars(priv2pub(privkey_hex, PRIV_KEY_LENGTH), PUB_KEY_LENGTH*2);
  return 0;
}&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;I borrowed a sample public/private key pair from &lt;a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses" title="Bitcoin wiki entry about addresses"&gt;this Bitcoin wiki article&lt;/a&gt;. You can see the private key, &lt;code&gt;18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725&lt;/code&gt;, hardcoded in the program. Bitcoin private keys are 32 bytes and public keys are 65 bytes. I wanted the input and output to be hexadecimal, so I needed a &lt;code&gt;hex2bytes&lt;/code&gt; helper function. I had to then convert the private key again, from bytes to &lt;code&gt;BIGNUM&lt;/code&gt;, which is the type OpenSSL uses for arbitrary precision arithmetic. Finally, I use another helper function, &lt;code&gt;print_chars&lt;/code&gt;, to print the final result.&lt;/p&gt;
 &lt;p&gt;The public key from the article is &lt;code&gt;0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6&lt;/code&gt;. Let&amp;rsquo;s see if our program can recover this public key from the private key. (I save the code above to a file &lt;code&gt;blog.c&lt;/code&gt;.)&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ gcc -lcrypto -std=c99 blog.c
$ ./a.out
0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Success!&lt;/p&gt;
 &lt;h3 id="software"&gt;Software&lt;/h3&gt;
 &lt;p&gt;In this post, I&amp;rsquo;m using OpenSSL 1.0.1e, gcc 4.7.2, and running Debian 7.0. I had to also install the &lt;code&gt;libssl-dev&lt;/code&gt; package to get the proper header files.&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>