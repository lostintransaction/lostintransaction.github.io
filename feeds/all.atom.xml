<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">My Awesome Blog: All Posts</title>
 <link rel="self" href="http://www.example.com/feeds/all.atom.xml" />
 <link href="http://www.example.com/index.html" />
 <id>urn:http-www-example-com:-index-html</id>
 <updated>2014-03-05T06:44:02Z</updated>
 <entry>
  <title type="text">Verifying Hashes and Signatures</title>
  <link rel="alternate" href="http://www.example.com/blog/2014/03/05/verifying-hashes-and-signatures/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-www-example-com:-blog-2014-03-05-verifying-hashes-and-signatures</id>
  <published>2014-03-05T06:44:02Z</published>
  <updated>2014-03-05T06:44:02Z</updated>
  <author>
   <name>The Unknown Author</name></author>
  <content type="html">
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=Atom&amp;amp;utm_campaign=%2Fblog%2F2014%2F03%2F05%2Fverifying-hashes-and-signatures%2F" height="1" width="1" /&gt;
 &lt;p&gt;&lt;em&gt;Replace this with your post text. Add one or more comma-separated Tags above. The special tag &lt;code&gt;DRAFT&lt;/code&gt; will prevent the post from being published.&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;Security is really important when handling bitcoins. One easy safeguard is to make sure you&amp;rsquo;re downloading what you think you&amp;rsquo;re downloading using hashes and signatures.&lt;/p&gt;
 &lt;p&gt;In this post, I check the hash and signature of MultiBit, essentially following &lt;a href="https://multibit.org/blog/2013/07/24/how-to-check-signatures.html" title="MultiBit tutorial on hashes and signatures"&gt;the MultiBit tutorial on hashes and signatures&lt;/a&gt;. All examples are run in Windows 7 (64-bit).&lt;/p&gt;
 &lt;h3 id="verifying-hashes"&gt;Verifying Hashes&lt;/h3&gt;
 &lt;h5 id="a-hash-function"&gt;A hash function&lt;/h5&gt;
 &lt;p&gt;A hash function maps its input to a number. The &lt;a href="http://en.wikipedia.org/wiki/SHA-1" title="SHA-1 Wikipedia entry"&gt;SHA&amp;ndash;1&lt;/a&gt; hash function maps inputs to 160-bit numbers (40 hexadecial digits). Here&amp;rsquo;s the SHA&amp;ndash;1 hash (computed with Microsoft&amp;rsquo;s FCIV program) of the &lt;code&gt;"Hello
world"&lt;/code&gt; example from the MultiBit tutorial:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ echo "Hello world" &amp;gt; example.txt
$ fciv -sha1 example.txt
//
// File Checksum Integrity Verifier version 2.05.
//
25e64db6d4d1d6116ffe0b317918c98f3624cbed example.txt&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Note that in Windows, the resulting hash differs from the tutorial (ie, when using Linux) because the Windows &lt;code&gt;examples.txt&lt;/code&gt; file has extra quotes, an extra space, and uses the windows &lt;code&gt;\r\n&lt;/code&gt; end-of-line instead of &lt;code&gt;\n&lt;/code&gt;. We can simulate the Linux version of the example with a quick &lt;a href="http://racket-lang.org"&gt;Racket&lt;/a&gt; script:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(with-output-to-file "example.txt" (lambda () (display "Hello world\n")) #:exists 'replace)&lt;/code&gt;&lt;/pre&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3
&amp;gt; (with-output-to-file "example.txt" (lambda () (display "Hello world\n")) #:exists 'replace)
&amp;gt; (exit)
$ fciv -sha1 example.txt
//
// File Checksum Integrity Verifier version 2.05.
//
33ab5639bfd8e7b95eb1d8d0b87781d4ffea4d5d example.txt
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;&lt;a href="http://bitcoin.stackexchange.com/questions/14041/multibit-error-or-at-least-confusion-in-how-to-check-digital-signatures-in" title="Bitcoin StackExchange"&gt;It looks like I&amp;rsquo;m not the only person that noticed the discrepancy&lt;/a&gt;.&lt;/p&gt;
 &lt;h5 id="checking-downloaded-files"&gt;Checking downloaded files&lt;/h5&gt;
 &lt;p&gt;Most software you download from the internet should provide a hash that you can verify to make sure the file was not corrupted or altered. For example, Multibit provides &lt;a href="http://en.wikipedia.org/wiki/SHA-2" title="SHA-256 Wikipedia entry"&gt;SHA&amp;ndash;256 hashes&lt;/a&gt; (256-bits) in &lt;a href="https://multibit.org/releases/multibit-0.5.17/release.txt" title="MultiBit 0.5.17 release notes"&gt;the release notes&lt;/a&gt; (SHA&amp;ndash;256 is also the main hash function used in the &lt;a href="https://en.bitcoin.it/wiki/Protocol_specification#Common_standards"&gt;Bitcoin protocol&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;&amp;ldquo;Bitcoin protocol&amp;rdquo;&lt;/p&gt;
 &lt;p&gt;Since FCIV only does SHA&amp;ndash;1, I needed something else that computes SHA&amp;ndash;256. A quick Google search turned up the &lt;a href="http://md5deep.sourceforge.net/"&gt;&lt;code&gt;md5deep&lt;/code&gt; library&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;Since we are being paranoid here, let&amp;rsquo;s just make sure the program we need is virus free by &lt;a href="https://www.virustotal.com/en/file/eec0c765124b014c824db8759300f36b4a62b74ff81dfa68f77440389bb68d29/analysis/" title="sha256deep64.exe on virustotal"&gt;uploading to VirusTotal&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;VirusTotal also uses SHA&amp;ndash;1, to track which files it has seen, and we can check that the file we uploaded, &lt;code&gt;sha256deep64.exe&lt;/code&gt;, matches the file for which VirusTotal is reporting results:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ sha256deep64 sha256deep64.exe
eec0c765124b014c824db8759300f36b4a62b74ff81dfa68f77440389bb68d29  sha256deep64.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Interestingly, &lt;code&gt;sha256deep64.exe&lt;/code&gt; and &lt;code&gt;sha1deep64.exe&lt;/code&gt; produce the same SHA&amp;ndash;256 hash:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ sha256deep64 sha1deep64.exe
eec0c765124b014c824db8759300f36b4a62b74ff81dfa68f77440389bb68d29  sha1deep64.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;No cause for concern though. Apparently this is [intentional][samehash] and the file behaves differently based on its name.&lt;/p&gt;
 &lt;p&gt;[samehash][http://sourceforge.net/projects/md5deep/reviews/?offset=25]  &amp;ldquo;explanation of identical hash&amp;rdquo;&lt;/p&gt;
 &lt;p&gt;Now we&amp;rsquo;re finally ready to check the hash of MultiBit 0.5.17 for Windows.&lt;/p&gt;
 &lt;p&gt;From the [release file][2]:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;SHA256 hashes for files:
90506bf43a64986ce8219ca0fb18a5e1f0776cfeb31043ca848cea7f71eda45d  multibit-0.5.17-windows-setup.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Computing the hash of the downloaded file:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ sha256deep64.exe multibit-0.5.17-windows-setup.exe
90506bf43a64986ce8219ca0fb18a5e1f0776cfeb31043ca848cea7f71eda45d  multibit-0.5.17-windows-setup.exe&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And it matches!&lt;/p&gt;
 &lt;h1 id="verifying-signatures"&gt;Verifying Signatures&lt;/h1&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">A 2012 blog post</title>
  <link rel="alternate" href="http://www.example.com/blog/2012/01/01/a-2012-blog-post/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-www-example-com:-blog-2012-01-01-a-2012-blog-post</id>
  <published>2012-01-01T00:00:00Z</published>
  <updated>2012-01-01T00:00:00Z</updated>
  <author>
   <name>The Unknown Author</name></author>
  <content type="html">
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=Atom&amp;amp;utm_campaign=%2Fblog%2F2012%2F01%2F01%2Fa-2012-blog-post%2F" height="1" width="1" /&gt;
 &lt;p&gt;Here is an example blog post.&lt;/p&gt;
 &lt;p&gt;Everything after this paragraph &amp;ldquo;after the break&amp;rdquo;. On index pages and Atom feeds, it will become &amp;ldquo;Continue reading&amp;hellip;&amp;rdquo;, if you configure them to include only the summary &amp;ldquo;blurb&amp;rdquo; before the break.&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;some code&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Here&amp;rsquo;s some &lt;a href="http://bullshitipsum.com/?paragraphs=2"&gt;Bullshit Ipsum&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;Addelivery integrate ecologies e-markets standards-compliant utilize technologies aggregate addelivery viral&amp;mdash;communities dynamic functionalities. Mindshare engineer viral A-list: cross-platform remix engage social cross-media social innovate distributed matrix experiences monetize utilize innovative. Action-items transition recontextualize sexy Cluetrain envisioneer, &amp;ldquo;vortals communities evolve technologies sexy methodologies.&amp;rdquo; Enhance grow compelling iterate architect matrix plug-and-play reinvent scale, distributed incentivize, extend.&lt;/p&gt;
 &lt;p&gt;Revolutionary proactive. Target; envisioneer e-services sticky robust morph users methodologies, markets content supply-chains, granular monetize reinvent harness initiatives. Plug-and-play productize vortals integrate compelling aggregate, user-contributed, integrate web-enabled grow extend mindshare, repurpose world-class harness next-generation eyeballs solutions blogospheres extend. Rss-capable methodologies, &amp;ldquo;vortals vertical,&amp;rdquo; synthesize real-time user-contributed impactful utilize architect deploy ROI redefine design proactive strategic user-centric.&lt;/p&gt;
 &lt;p&gt;Here&amp;rsquo;s a footnote&lt;sup&gt;&lt;a href="#2012-01-01-a-2012-blog-post-footnote-1-definition" name="2012-01-01-a-2012-blog-post-footnote-1-return"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
 &lt;h2 id="code-blocks"&gt;Code blocks&lt;/h2&gt;
 &lt;p&gt;Frog optionally uses &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; if it&amp;rsquo;s installed to do syntax highlighting. In your markdown using backtick code blocks you can specify a language:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;```language
some racket code
```&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;That name is given to Pygments as the lexer to use.&lt;/p&gt;
 &lt;p&gt;For example this:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;```js
/**
 * Some JavaScript
 */
function foo()
{
    if (counter &amp;lt;= 10)
        return;
    // it works!
```&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Yields this:&lt;/p&gt;
 &lt;pre class="brush: js"&gt;&lt;code&gt;/**
 * Some JavaScript
 */
function foo()
{
    if (counter &amp;lt;= 10)
        return;
    // it works!&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And this:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;```racket
#lang racket
;; Finds Racket sources in all subdirs
(for ([path (in-directory)])
  (when (regexp-match? #rx"[.]rkt$" path)
    (printf "source file: ~a\n" path)))
(symbol-&amp;gt;string 'foo)
```&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Yields this:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;#lang racket
;; Finds Racket sources in all subdirs
(for ([path (in-directory)])
  (when (regexp-match? #rx"[.]rkt$" path)
    (printf "source file: ~a\n" path)))
(symbol-&amp;gt;string 'foo)&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Notice that, for Racket, symbols with unambiguous documentation (provided by one library, or provided by several where one is &lt;code&gt;racket&lt;/code&gt; or &lt;code&gt;racket/base&lt;/code&gt;) are links to that documentation.&lt;/p&gt;
 &lt;p&gt;This also works outside fenced code blocks, for symbols in backticks immediately followed by &lt;code&gt;[racket]&lt;/code&gt;. Example: &lt;code class="brush: racket"&gt;printf&lt;/code&gt;. This isn&amp;rsquo;t official Markdown; it&amp;rsquo;s simply a pun on link syntax and fenced code block languages. This is similar to using &lt;code&gt;@racket[printf]&lt;/code&gt; in Scribble.&lt;/p&gt;
 &lt;p&gt;&lt;code class="brush: racket"&gt;symbol-&amp;gt;string&lt;/code&gt;.&lt;/p&gt;
 &lt;p&gt;Here is a lambda: λ.&lt;/p&gt;
 &lt;p&gt;Here is a lambda in code backticks: &lt;code&gt;λ&lt;/code&gt;.&lt;/p&gt;
 &lt;p&gt;And here in indented code block:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And here in fenced code block, no lang specified:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And here in fenced code block, lang = &lt;code&gt;racket&lt;/code&gt;:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And here in fenced code block, lang = &lt;code&gt;scheme&lt;/code&gt;:&lt;/p&gt;
 &lt;pre class="brush: scheme"&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Here&amp;rsquo;s a simple &lt;code&gt;for&lt;/code&gt; macro, written in &lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html"&gt;Racket&lt;/a&gt;:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define-syntax-rule (for (x e1) e2)
  (for-each (λ (x) e2) e1))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The end.&lt;/p&gt;
 &lt;div class="footnotes"&gt;
  &lt;ol&gt;
   &lt;li id="2012-01-01-a-2012-blog-post-footnote-1-definition" class="footnote-definition"&gt;
    &lt;p&gt;Footnote definition.&amp;nbsp;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/html&gt;</content></entry></feed>