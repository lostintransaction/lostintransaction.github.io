<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Lost in Transaction: A neophyte explores Bitcoin: Posts tagged 'elliptic curve'</title>
  <description>Lost in Transaction: A neophyte explores Bitcoin: Posts tagged 'elliptic curve'</description>
  <link>http://www.lostintransaction.com/tags/elliptic-curve.html</link>
  <lastBuildDate>Fri, 14 Mar 2014 05:28:01 UTC</lastBuildDate>
  <pubDate>Fri, 14 Mar 2014 05:28:01 UTC</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Computing a Bitcoin Address, Part 1: Private to Public Key</title>
   <link>http://www.lostintransaction.com/blog/2014/03/14/computing-a-bitcoin-address-part-1-private-to-public-key/?utm_source=elliptic-curve&amp;utm_medium=RSS</link>
   <guid>urn:http-www-lostintransaction-com:-blog-2014-03-14-computing-a-bitcoin-address-part-1-private-to-public-key</guid>
   <pubDate>Fri, 14 Mar 2014 05:28:01 UTC</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.lostintransaction.com/img/1x1.gif?utm_source=elliptic-curve&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2014%2F03%2F14%2Fcomputing-a-bitcoin-address-part-1-private-to-public-key%2F" height="1" width="1" /&gt;
 &lt;p&gt;I&amp;rsquo;ve been wondering how Bitcoin addresses are generated. This post and the ones following will explore, step by step, how to transform a Bitcoin private key to a public address.&lt;/p&gt;
 &lt;p&gt;I know that Bitcoin public and private keys are &lt;a href="http://en.wikipedia.org/wiki/Elliptic_Curve_DSA" title="Wikipedia: Elliptic Curve DSA"&gt;Elliptic Curve DSA (ECDSA)&lt;/a&gt; key pairs, and I&amp;rsquo;ve seen the &lt;a href="http://stackoverflow.com/questions/12480776/how-do-i-obtain-the-public-key-from-an-ecdsa-private-key-in-openssl" title="Stack Overflow: Public Key from Private Key"&gt;&lt;code&gt;Q = dG&lt;/code&gt; explanation&lt;/a&gt; on a few sites, but they leave out some details. I want to experiment for myself, so this post describes how to derive a public key from a private key with runnable code.&lt;/p&gt;
 &lt;hr /&gt;
 &lt;blockquote&gt;
  &lt;p&gt;This is the first post in a four-part series. Here are the rest of the articles in the series: &amp;gt; * &lt;a href="http://www.lostintransaction.com/blog/2014/03/15/computing-a-bitcoin-address-part-2-public-key-to-hex-address/"&gt;Part 2: Public Key to (Hex) Address&lt;/a&gt; &amp;gt; * &lt;a href="http://www.lostintransaction.com/blog/2014/03/18/computing-a-bitcoin-address-part-3-base58check-encoding/"&gt;Part 3: Base58Check Encoding&lt;/a&gt; &amp;gt; * &lt;a href="http://www.lostintransaction.com/blog/2014/04/09/computing-a-bitcoin-address-part-4-wallet-import-format-wif/"&gt;Part 4: Wallet Import Format (WIF)&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
 &lt;hr /&gt;
 &lt;p&gt;The &lt;a href="http://stackoverflow.com/a/12482384/951881" title="Stack Overflow: Public Key from Private Key Answer"&gt;accepted Stack Overflow answer from the previous link&lt;/a&gt; says that in the &lt;code&gt;Q = dG&lt;/code&gt; equation, &lt;code&gt;Q&lt;/code&gt; is the public key and &lt;code&gt;d&lt;/code&gt; is the private key, but does not explain &lt;code&gt;G&lt;/code&gt;, the group parameter. Luckily, some Googling quickly finds that Bitcoin uses the &lt;a href="https://en.bitcoin.it/wiki/Secp256k1" title="secp256k1 Bitcoin wiki entry"&gt;&lt;code&gt;secp256k1&lt;/code&gt; ECDSA curve&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;Next, I looked at the &lt;a href="https://www.openssl.org/" title="OpenSSL"&gt;OpenSSL&lt;/a&gt; &lt;code&gt;libcrypto&lt;/code&gt; C library, in &lt;a href="http://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=crypto/ec/ec_key.c;h=7fa247593d91b45347704e62e184e1138fc8bd01;hb=46ebd9e3bb623d3c15ef2203038956f3f7213620#l236" title="crypto/ec/ec_key.c"&gt;&lt;code&gt;EC_KEY_generate_key&lt;/code&gt; (the function mentioned in the Stack Overflow post)&lt;/a&gt;. Here&amp;rsquo;s the line that performs the multiplication:&lt;/p&gt;
 &lt;pre class="brush: c"&gt;&lt;code&gt;EC_POINT_mul(eckey-&amp;gt;group, pub_key, priv_key, NULL, NULL, ctx);&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;In this case, I&amp;rsquo;m supplying &lt;code&gt;priv_key&lt;/code&gt;, and &lt;code&gt;pub_key&lt;/code&gt; is the output parameter, so I just need the appropriate group for the first parameter. OpenSSL has &lt;a href="http://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=crypto/objects/obj_mac.h;h=b5ea7cdab4f84b90280f0a3aae1478a8d715c7a7;hb=46ebd9e3bb623d3c15ef2203038956f3f7213620#l385" title="crypto/objects/obj_mac.h"&gt;already defined the &lt;code&gt;secp256k1&lt;/code&gt; curve&lt;/a&gt;, so it&amp;rsquo;s just a matter of getting the right data representation. Here is the &lt;a href="http://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=crypto/ec/ec.h;h=dfe8710d330954bb1762a5fe13d655ac7a5f01be;hb=46ebd9e3bb623d3c15ef2203038956f3f7213620#l643" title="crypto/ec/ec.h"&gt;header for &lt;code&gt;EC_POINT_mul&lt;/code&gt;&lt;/a&gt; from the OpenSSL library:&lt;/p&gt;
 &lt;pre class="brush: c"&gt;&lt;code&gt;/** Computes r = generator * n + q * m
 *  \param  group  underlying EC_GROUP object
 *  \param  r      EC_POINT object for the result
 *  \param  n      BIGNUM with the multiplier for the group generator (optional)
 *  \param  q      EC_POINT object with the first factor of the second summand
 *  \param  m      BIGNUM with the second factor of the second summand
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
int EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n, const EC_POINT *q, const BIGNUM *m, BN_CTX *ctx);&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Looks like we need an &lt;code&gt;EC_GROUP&lt;/code&gt;. To create one we call &lt;a href="http://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=crypto/ec/ec_curve.c;h=c72fb2697ca2823a4aac36b027012bed6c457288;hb=46ebd9e3bb623d3c15ef2203038956f3f7213620#l2057" title="crypco/ec/ec_curve.c"&gt;&lt;code&gt;EC_GROUP_new_by_curve_name&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;Putting everything together, here&amp;rsquo;s a function &lt;code&gt;priv2pub&lt;/code&gt; that computes a public key from a private key (disclaimer: the code has no error-checking so don&amp;rsquo;t use this in production):&lt;/p&gt;
 &lt;pre class="brush: c"&gt;&lt;code&gt;// calculates and returns the public key associated with the given private key
// - input private key and output public key are in hexadecimal
// form = POINT_CONVERSION_[UNCOMPRESSED|COMPRESSED|HYBRID]
unsigned char *priv2pub( const unsigned char *priv_hex,
                         point_conversion_form_t form )
{
  // create group
  EC_GROUP *ecgrp = EC_GROUP_new_by_curve_name( NID_secp256k1 );
  
  // convert priv key from hexadecimal to BIGNUM
  BIGNUM *priv_bn = BN_new();
  BN_hex2bn( &amp;amp;priv_bn, priv_hex );
  
  // compute pub key from priv key and group
  EC_POINT *pub = EC_POINT_new( ecgrp );
  EC_POINT_mul( ecgrp, pub, priv_bn, NULL, NULL, NULL );
                           
  // convert pub_key from elliptic curve coordinate to hexadecimal
  unsigned char *ret = EC_POINT_point2hex( ecgrp, pub, form, NULL );
 
  EC_GROUP_free( ecgrp ); BN_free( priv_bn ); EC_POINT_free( pub );
  
  return ret;
}&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The function assumes that the input private key is in hex, and returned public key is in hex as well. I had to first convert the private key to &lt;code&gt;BIGNUM&lt;/code&gt;, which is OpenSSL&amp;rsquo;s number representation for arbitrary precision arithmetic. The computed public key is an OpenSSL &lt;code&gt;EC_POINT&lt;/code&gt; data structure, which represents a curve coordinate. The curve coordinate is converted back to hex using &lt;code&gt;EC_POINT_point2hex&lt;/code&gt;. &lt;a href="https://en.bitcoin.it/wiki/Elliptic_Curve_Digital_Signature_Algorithm" title="Bitcoin Wiki: Elliptic Curve Digital Signature Algorithm"&gt;Public keys can either be compressed or uncompressed&lt;/a&gt;, and the format of the output of &lt;code&gt;priv2pub&lt;/code&gt; depends on the &lt;code&gt;form&lt;/code&gt; input parameter, &lt;a href="http://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=crypto/ec/ec.h;h=dfe8710d330954bb1762a5fe13d655ac7a5f01be;hb=46ebd9e3bb623d3c15ef2203038956f3f7213620#l104" title="crypto/ec/ec.h"&gt;which can be one of three values&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;To test this function, I found a sample public/private key pair from &lt;a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses" title="Bitcoin wiki: technical explanation of addresses"&gt;this Bitcoin wiki article&lt;/a&gt;. The private key from the article is &lt;code&gt;18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725&lt;/code&gt; and the public key is &lt;code&gt;0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6&lt;/code&gt;. The public key begins with &lt;code&gt;0x04&lt;/code&gt; &lt;a href="http://www.secg.org/collateral/sec1.pdf" title="SEC: Elliptic Curve Cryptography"&gt;so we know it&amp;rsquo;s in uncompressed form&lt;/a&gt; and is 65 bytes long (see ANSI X9.62 for more details).&lt;/p&gt;
 &lt;p&gt;I used the following main function to test if &lt;code&gt;priv2pub&lt;/code&gt; can compute the public key with the private key from the example:&lt;/p&gt;
 &lt;pre class="brush: c"&gt;&lt;code&gt;int main( int argc, const unsigned char *argv[] )
{
  // get priv key from cmd line and compute pub key
  unsigned char *pub_hex = priv2pub( argv[1], POINT_CONVERSION_UNCOMPRESSED );
  
  printf( "%s\n", pub_hex );
 
  free( pub_hex );
  
  return 0;
}&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;I save the code above to a file &lt;code&gt;priv2pub.c&lt;/code&gt;:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ gcc -lcrypto -std=c99 priv2pub.c -o priv2pub
$ ./priv2pub 18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725
0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Success!&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s try another example. I generated a private key with &lt;a href="https://www.bitaddress.org"&gt;bitaddress.org&lt;/a&gt;, &lt;code&gt;5JQZaZrYCbJ1Kb96vFBMEefrQGuNfHSqbHbviC3URUNGJ27frFe&lt;/code&gt;, but it&amp;rsquo;s in &lt;a href="https://en.bitcoin.it/wiki/Base58Check_encoding" title="Bitcoin wiki: Base58Check encoding"&gt;Base58Check encoding&lt;/a&gt; and not hex. We&amp;rsquo;ll deal with Base58 encoding later so for now I went to the &amp;ldquo;Wallet Details&amp;rdquo; tab at &lt;a href="https://www.bitaddress.org"&gt;bitaddress.org&lt;/a&gt;, entered the base58 key, and got back that the private key in hex is &lt;code&gt;4DD3D47E491C5D34F9540EBF3444E3D6675015A46B61AF37B4EB7F17DDDF4E61&lt;/code&gt; and public key is &lt;code&gt;0492EDC09A7311C2AB83EF3D133331D7B73117902BB391D9DAC3BE261547F571E171F16775DDA6D09A6AAF1F3F6E6AA3CFCD854DCAA6AED0FA7AF9A5ED9965E117&lt;/code&gt;. Let&amp;rsquo;s check what our code says:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ ./priv2pub 4DD3D47E491C5D34F9540EBF3444E3D6675015A46B61AF37B4EB7F17DDDF4E61
0492EDC09A7311C2AB83EF3D133331D7B73117902BB391D9DAC3BE261547F571E171F16775DDA6D09A6AAF1F3F6E6AA3CFCD854DCAA6AED0FA7AF9A5ED9965E117&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Hurrah!&lt;/p&gt;
 &lt;h3 id="a-racket-version"&gt;A Racket Version&lt;/h3&gt;
 &lt;p&gt;I&amp;rsquo;m using &lt;a href="http://racket-lang.org"&gt;Racket&lt;/a&gt;, a modern LISP dialect, to experiment with Bitcoin so I want a Racket version of my conversion function as well. Fortunately, Racket has an &lt;a href="http://docs.racket-lang.org/foreign/index.html" title="Racket FFI"&gt;FFI&lt;/a&gt; that enables Racket code to call C functions directly.&lt;/p&gt;
 &lt;p&gt;First I create a slightly different version of my C function:&lt;/p&gt;
 &lt;pre class="brush: c"&gt;&lt;code&gt;// calculates and returns the public key associated with the given private key
// - input private key is in hexadecimal
// - output public key is in raw bytes
// form = POINT_CONVERSION_[UNCOMPRESSED|COMPRESSED|HYBRID]
unsigned char *priv2pub_bytes( const unsigned char *priv_hex,
                               point_conversion_form_t form,
                               unsigned char *ret )
{
  // create group
  EC_GROUP *ecgrp = EC_GROUP_new_by_curve_name( NID_secp256k1 );
  
  // convert priv key from hexadecimal to BIGNUM
  BIGNUM *priv_bn = BN_new();
  BN_hex2bn( &amp;amp;priv_bn, priv_hex );
  
  // compute pub key from priv key and group
  EC_POINT *pub = EC_POINT_new( ecgrp );
  EC_POINT_mul( ecgrp, pub, priv_bn, NULL, NULL, NULL );
  
  // convert pub key from elliptic curve coordinate to bytes
  //  (first call gets the appropriate length to use)
  size_t len = EC_POINT_point2oct( ecgrp, pub, form, NULL, 0, NULL );
  EC_POINT_point2oct( ecgrp, pub, form, ret, len, NULL );
        
  EC_GROUP_free( ecgrp ); BN_free( priv_bn ); EC_POINT_free( pub );
  
  return ret;
}&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The difference is an extra parameter and the representation of the public key output. This new function uses &lt;code&gt;EC_POINT_point2oct&lt;/code&gt; to return a byte string instead of a hex string. The problem is that the hex conversion function, &lt;code&gt;EC_POINT_point2hex&lt;/code&gt;, allocates, but I don&amp;rsquo;t want to manually manage memory in Racket. Because &lt;code&gt;priv2pub_bytes&lt;/code&gt; consumes an additional buffer parameter, Racket can allocate a buffer controlled by the GC prior to calling the function, and then pass in this allocated buffer.&lt;/p&gt;
 &lt;p&gt;Next I use Racket&amp;rsquo;s FFI to create a Racket wrapper function for the &lt;code&gt;priv2pub_bytes&lt;/code&gt; C function. The FFI requires a library file, so I compile the &lt;code&gt;.c&lt;/code&gt; file to a &lt;code&gt;.so&lt;/code&gt; library.&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ gcc -lcrypto -std=c99 -fPIC -shared -Wl,-soname,libpriv2pub.so.1 priv2pub.c -o libpriv2pub.so.1.0
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;This creates a dynamic library file named &lt;code&gt;libpriv2pub.so.1.0&lt;/code&gt;.&lt;/p&gt;
 &lt;p&gt;To create a Racket value for this library, we use the Racket &lt;code&gt;ffi-lib&lt;/code&gt; function:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define-runtime-path libpriv2pub-so '(so "libpriv2pub"))

(define libpriv2pub (ffi-lib libpriv2pub-so '("1.0")))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The first argument to &lt;code&gt;ffi-lib&lt;/code&gt; is the path of the library and the second argument specifies a list of acceptable version numbers.&lt;/p&gt;
 &lt;p&gt;Once we have a hook into the C library, we can create Racket wrappers for individual functions in the library. We use the Racket &lt;code&gt;get-ffi-obj&lt;/code&gt; function to do this:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define UNCOMPRESSED-LEN 65)
(define priv2pub_bytes
  (get-ffi-obj 'priv2pub_bytes libpriv2pub
    (_fun _string _int (_bytes o UNCOMPRESSED-LEN)
          -&amp;gt; (_bytes o UNCOMPRESSED-LEN))))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;This creates a Racket function &lt;code&gt;priv2pub_bytes&lt;/code&gt; where the first argument is a (Racket) string, the second is an int indicating whether the output should be in compressed or uncompressed form, and the third is the output buffer. A pointer to the output buffer is also returned by the function. We make the size the output buffer equal to the uncompressed form since that is the maximum size.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s make things easier to use with a couple more functions:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define COMPRESSED 2) ; POINT_CONVERSION_COMPRESSED
(define UNCOMPRESSED 4) ; POINT_CONVERSION_UNCOMPRESSED
(define COMPRESSED-LEN 33)
(define (priv-key-&amp;gt;pub-key/compressed priv/hex)
  (bytes-&amp;gt;hex-string 
    (subbytes (priv2pub_bytes priv/hex COMPRESSED) 0 COMPRESSED-LEN)))
(define (priv-key-&amp;gt;pub-key priv/hex)
  (bytes-&amp;gt;hex-string 
    (priv2pub_bytes priv/hex UNCOMPRESSED)))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;&lt;code&gt;priv-key-&amp;gt;pub-key&lt;/code&gt; consumes a private key in hex and returns an uncompressed public key, also in hex. &lt;code&gt;priv-key-&amp;gt;pub-key/compressed&lt;/code&gt; is similar except it returns a compressed public key (note that this function extracts only the first 33 bytes of the output buffer).&lt;/p&gt;
 &lt;p&gt;Testing our examples again, with &lt;a href="http://docs.racket-lang.org/xrepl/index.html" title="XREPL"&gt;the Racket (extended) REPL&lt;/a&gt;, we see that our Racket functions produce the same results:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "priv2pub.rkt")
-&amp;gt; (priv-key-&amp;gt;pub-key "18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725")
"0450863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b23522cd470243453a299fa9e77237716103abc11a1df38855ed6f2ee187e9c582ba6"
-&amp;gt; (priv-key-&amp;gt;pub-key "4DD3D47E491C5D34F9540EBF3444E3D6675015A46B61AF37B4EB7F17DDDF4E61")
"0492edc09a7311c2ab83ef3d133331d7b73117902bb391d9dac3be261547f571e171f16775dda6d09a6aaf1f3f6e6aa3cfcd854dcaa6aed0fa7af9a5ed9965e117"&lt;/code&gt;&lt;/pre&gt;
 &lt;h3 id="software"&gt;Software&lt;/h3&gt;
 &lt;p&gt;The C code from this post &lt;a href="http://www.lostintransaction.com/code/priv2pub.c"&gt;is available here&lt;/a&gt; and the Racket code &lt;a href="http://www.lostintransaction.com/code/priv2pub.rkt"&gt;is available here&lt;/a&gt;. In this post, I&amp;rsquo;m using OpenSSL 1.0.1e and gcc 4.7.2, running in Debian 7.0. I had to install the &lt;code&gt;libssl-dev&lt;/code&gt; package to get the proper header files.&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>