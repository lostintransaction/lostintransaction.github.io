<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Lost in Transaction: A neophyte explores Bitcoin: Posts tagged 'Bitcoin addresses'</title>
  <description>Lost in Transaction: A neophyte explores Bitcoin: Posts tagged 'Bitcoin addresses'</description>
  <link>http://www.lostintransaction.com/tags/Bitcoin-addresses.html</link>
  <lastBuildDate>Thu, 17 Apr 2014 03:43:06 UTC</lastBuildDate>
  <pubDate>Thu, 17 Apr 2014 03:43:06 UTC</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Generating a Vanity Address</title>
   <link>http://www.lostintransaction.com/blog/2014/04/17/generating-a-vanity-address/?utm_source=Bitcoin-addresses&amp;utm_medium=RSS</link>
   <guid>urn:http-www-lostintransaction-com:-blog-2014-04-17-generating-a-vanity-address</guid>
   <pubDate>Thu, 17 Apr 2014 03:43:06 UTC</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.lostintransaction.com/img/1x1.gif?utm_source=Bitcoin-addresses&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2014%2F04%2F17%2Fgenerating-a-vanity-address%2F" height="1" width="1" /&gt;
 &lt;p&gt;It a &lt;a href="http://www.lostintransaction.com/blog/2014/03/14/computing-a-bitcoin-address-part-1-private-to-public-key/" title="Computing a Bitcoin Address"&gt;previous series of posts&lt;/a&gt;, we figured out how to derive a Bitcoin public address from a private key. What should we do with this new knowledge? Let&amp;rsquo;s generate a bunch of addresses! Specifically, we&amp;rsquo;ll create a &amp;ldquo;vanity&amp;rdquo; address generator.&lt;/p&gt;
 &lt;p&gt;Most Bitcoin wallets generate addresses randomly. A Bitcoin &lt;a href="https://en.bitcoin.it/wiki/Vanitygen" title="Vanitygen"&gt;vanity address&lt;/a&gt;, however, is one that has a prefix specified by the user. Of course, you don&amp;rsquo;t want to trust a third party to create a private key for you, so let&amp;rsquo;s generate our own. (Yes, I know that &lt;code&gt;vanitygen&lt;/code&gt; is open source and has tons more features but it&amp;rsquo;s still more fun to roll our own!) As usual, I&amp;rsquo;ll be using &lt;a href="http://racket-lang.org"&gt;Racket&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;First, we need to generate a random private key. Bitcoin private keys are 32 bytes long.&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define (random-byte) (random 256))

;; generates raw 32 byte private key (in hex)
(define (random-priv-key)
  (bytes-&amp;gt;hex-string (apply bytes (for/list ([i 32]) (random-byte)))))&lt;/code&gt;&lt;/pre&gt;
 &lt;blockquote&gt;
  &lt;p&gt;WARNING #1: Racket&amp;rsquo;s &lt;code&gt;random&lt;/code&gt; function is  &lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html?q=make-pseudo-random-generator#%28def._%28%28quote._~23~25kernel%29._make-pseudo-random-generator%29%29" title="Racket docs: make-pseudo-random-generator"&gt;seeded with the system time&lt;/a&gt; and is thus not  &lt;a href="https://cwe.mitre.org/data/definitions/337.html"&gt;completely random&lt;/a&gt;. When  generating addresses for real-world usage, use a  &lt;a href="http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator" title="Wikipedia: Cryptographically secure pseudorandom number generator"&gt;cryptographically secure source of randomness&lt;/a&gt; like  &lt;code&gt;/dev/random&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;p&gt;WARNING #2:  &lt;a href="https://en.bitcoin.it/wiki/Private_key#Range_of_valid_private_keys" title="Range of valid private keys"&gt;Not every 32 byte number is a valid private key&lt;/a&gt;. But  here I assume that it&amp;rsquo;s sufficiently unlikely that I&amp;rsquo;ll randomly  generate an invalid key, so I ignore this issue.&lt;/p&gt;&lt;/blockquote&gt;
 &lt;p&gt;Once we have a private key, we need to convert to &lt;a href="https://en.bitcoin.it/wiki/WIF" title="Wallet import format"&gt;wallet import format (WIF)&lt;/a&gt;. To do this we need to decide if we want a compressed or uncompressed address. These days most addresses in use are compressed so we&amp;rsquo;ll go with compressed. The format for a compressed WIF private key is:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;0x80 + 32 byte raw private key + 0x10 + 4 byte checksum&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;To create a WIF private key we append &lt;code&gt;0x80&lt;/code&gt; to the front of our randomly generated raw private key to indicate &amp;ldquo;mainnet&amp;rdquo; (as opposed to &amp;ldquo;testnet&amp;rdquo;) and we append &lt;code&gt;0x01&lt;/code&gt; to the end to indicate compression. We then compute a checksum for this string and append that to the end of the string. A checksum is the first 4 bytes of a double SHA&amp;ndash;256 hash, as we &lt;a href="http://www.lostintransaction.com/blog/2014/04/09/computing-a-bitcoin-address-part-4-wallet-import-format-wif/" title="Computing a Bitcoin Address, Part 4: Wallet Import Format (WIF)"&gt;saw previously&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;Here&amp;rsquo;s a Racket function &lt;code&gt;priv-key-&amp;gt;wif/compressed&lt;/code&gt; to convert a raw private key to wallet import format. We use &lt;code&gt;add-checksum&lt;/code&gt; from &lt;a href="http://www.lostintransaction.com/blog/2014/04/09/computing-a-bitcoin-address-part-4-wallet-import-format-wif/" title="Computing a Bitcoin Address, Part 4: Wallet Import Format (WIF)"&gt;a previous post&lt;/a&gt;.&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define (add-mainnet80 str) (string-append "80" str))
(define (add-compression-flag str) (string-append str "01"))
;; converts raw priv key (in hex) to wif (in base58)
(define (priv-key-&amp;gt;wif/compressed priv)
  (hex-str-&amp;gt;base58-str (add-checksum (add-compression-flag (add-mainnet80 priv)))))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;To generate a random address, we use the functions defined in this post, and &lt;code&gt;wif-&amp;gt;addr&lt;/code&gt; &lt;a href="http://www.lostintransaction.com/blog/2014/04/09/computing-a-bitcoin-address-part-4-wallet-import-format-wif/" title="Computing a Bitcoin Address, Part 4: Wallet Import Format (WIF)"&gt;from a previous post&lt;/a&gt;, which converts a WIF private key to an address. To get a vanity address, we check if the prefix of the generated address matches a specified substring (all Bitcoin addresses start with &amp;lsquo;1&amp;rsquo;, so prefix here means the substring after the &amp;lsquo;1&amp;rsquo;).&lt;/p&gt;
 &lt;p&gt;The following Racket function &lt;code&gt;get-vanity-addr&lt;/code&gt; repeatedly generates a random private key, converts it to an address, and checks if the prefix of the address matches the specified &amp;ldquo;vanity&amp;rdquo; substring. If no matching address is found after the specified number of &lt;code&gt;tries&lt;/code&gt; (default is 1,000,000 tries), the function gives up. Otherwise, the function returns the raw private key, the WIF private key, and the public address.&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define (get-vanity-addr prefix #:tries [tries 1000000])
  (define prefix1 (string-append "1" prefix))
  (define prefix-len (string-length prefix1))
  (let loop ([n tries])
    (if (zero? n)
    (printf "\nCouldn't find matching address in ~a tries\n" tries)
    (let* ([priv (random-priv-key)]
           [priv/wif (priv-key-&amp;gt;wif/compressed priv)]
           [addr (wif-&amp;gt;addr priv/wif)])
      (if (string=? (substring addr 0 prefix-len) prefix1)
          (values priv priv/wif addr)
          (loop (sub1 n)))))))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Let&amp;rsquo;s try it. I specify a prefix of &amp;ldquo;11&amp;rdquo;, so the function tries to find an address with three leading &amp;rsquo;1&amp;rsquo;s:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "vanity.rkt")
-&amp;gt; (get-vanity-addr "11")
Address found! -----------------------------------------------
private key: 286a5cdfb346648b902fe30c46e2f44246d9071ab5ddcf2fb6101a657cbc18de
private key (WIF): KxaGocHndfhXzPGdrDTfr6EDvnNfbdZwdxcX7xtjL6UnERFZhtkZ
public address: 111ksvuJkfkFef8krFpsUeKDrCSedKpxM
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;We found an address! To check that it&amp;rsquo;s a valid address, I sent some BTC to the address to confirm. Lo and behold, &lt;a href="https://blockchain.info/address/111ksvuJkfkFef8krFpsUeKDrCSedKpxM" title="blockchain.info"&gt;the transactions appear in the blockchain&lt;/a&gt;!&lt;/p&gt;
 &lt;p&gt;Next I imported the WIF private key into MultiBit. MultiBit requires that the key be accompanied by a time in UTC format and saved to a file so here&amp;rsquo;s the contents of the file I created and imported into MultiBit:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;KxaGocHndfhXzPGdrDTfr6EDvnNfbdZwdxcX7xtjL6UnERFZhtkZ 2014-04-15T06:12:28Z&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;To make sure the import succeeded, I spent the BTC that I just received. &lt;a href="https://blockchain.info/address/111ksvuJkfkFef8krFpsUeKDrCSedKpxM" title="blockchain.info"&gt;Checking the blockchain again&lt;/a&gt;, we can see that sending BTC from our generated address worked as well!&lt;/p&gt;
 &lt;h3 id="software"&gt;Software&lt;/h3&gt;
 &lt;p&gt;All the code from this post &lt;a href="http://www.lostintransaction.com/code/vanity.rkt"&gt;is available here&lt;/a&gt;. In this post, I&amp;rsquo;m using Racket 6.0.0.3 running in Debian 7.0, and MultiBit 0.5.17 running in Windows 7 64-bit.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Computing a Bitcoin Address, Part 4: Wallet Import Format (WIF)</title>
   <link>http://www.lostintransaction.com/blog/2014/04/09/computing-a-bitcoin-address-part-4-wallet-import-format-wif/?utm_source=Bitcoin-addresses&amp;utm_medium=RSS</link>
   <guid>urn:http-www-lostintransaction-com:-blog-2014-04-09-computing-a-bitcoin-address-part-4-wallet-import-format-wif</guid>
   <pubDate>Wed, 09 Apr 2014 03:02:03 UTC</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.lostintransaction.com/img/1x1.gif?utm_source=Bitcoin-addresses&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2014%2F04%2F09%2Fcomputing-a-bitcoin-address-part-4-wallet-import-format-wif%2F" height="1" width="1" /&gt;
 &lt;p&gt;In previous posts, we figured out how to compute a Bitcoin address from a private key and we tested our code with an &lt;a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses" title="Bitcoin wiki: Bitcoin addresses"&gt;example from the Bitcoin wiki&lt;/a&gt;. In this post we try to convert a private key from a real wallet (MultiBit) to its corresponding address.&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;This is the fourth post in a four-part series titled &amp;ldquo;Computing a Bitcoin Address&amp;rdquo;. Here are all the articles in the series:&lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;Part 1: &lt;a href="http://www.lostintransaction.com/blog/2014/03/14/computing-a-bitcoin-address-part-1-private-to-public-key/"&gt;Private to Public Key&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;Part 2: &lt;a href="http://www.lostintransaction.com/blog/2014/03/15/computing-a-bitcoin-address-part-2-public-key-to-hex-address/"&gt;Public Key to (Hex) Address&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;Part 3: &lt;a href="http://www.lostintransaction.com/blog/2014/03/18/computing-a-bitcoin-address-part-3-base58check-encoding/"&gt;Base58Check Encoding&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;Part 4: &lt;a href="http://www.lostintransaction.com/blog/2014/04/09/computing-a-bitcoin-address-part-4-wallet-import-format-wif/"&gt;Wallet Import Format (WIF)&lt;/a&gt; (this post)&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
 &lt;h3 id="from-private-key-to-public-address"&gt;From Private Key to Public Address&lt;/h3&gt;
 &lt;p&gt;Let&amp;rsquo;s consolidate the code from the previous posts to create one function that performs all the steps to convert a private key to a public address. First we create some helper functions:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define (hash160/hex hstr) (ripemd160/hex (sha256/hex hstr)))
(define (sha256x2/hex hstr) (sha256/hex (sha256/hex hstr)))
(define (add-version0 str) (string-append "00" str))
;; checksum is 1st 4 bytes (8 chars) of double sha256 hash of given hex string
(define (get-checksum hstr) (substring hstr 0 8))
(define (compute-checksum hstr) (get-checksum (sha256x2/hex hstr)))
(define (add-checksum hstr) (string-append hstr (compute-checksum hstr)))&lt;/code&gt;&lt;/pre&gt;
 &lt;ul&gt;
  &lt;li&gt;&lt;code&gt;hash160/hex&lt;/code&gt;: performs a SHA&amp;ndash;256 hash followed by a RIPEMD&amp;ndash;160 hash on an input hex string&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;sha256x2/hex&lt;/code&gt;: performs SHA&amp;ndash;256 twice on an input hex string&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;add-version0&lt;/code&gt;: prepends &lt;code&gt;0x00&lt;/code&gt; to a hex string&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;compute-checksum&lt;/code&gt;: computes checksum (first 4 bytes of a double SHA&amp;ndash;245 hash) of its input&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;add-checksum&lt;/code&gt;: computes a checksum for its input and appends that checksum to the end of the input&lt;/li&gt;&lt;/ul&gt;
 &lt;p&gt;Here&amp;rsquo;s a function &lt;code&gt;priv-key-&amp;gt;addr&lt;/code&gt; that converts a private key (in hex) to a public address (in Base58Check):&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;;; computes base58 addr from hex priv key
(define priv-key-&amp;gt;addr
  (compose hex-str-&amp;gt;base58-str
           add-checksum
           add-version0
           hash160/hex
           priv-key-&amp;gt;pub-key))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;We use Racket&amp;rsquo;s &lt;code&gt;compose&lt;/code&gt; function, which strings together a series of functions. The functions are called in the reverse order in which they are listed, so &lt;code&gt;priv-key-&amp;gt;addr&lt;/code&gt; first calls &lt;code&gt;priv-key-&amp;gt;pub-key&lt;/code&gt; on its input, then takes that results and give it to &lt;code&gt;hash160/hex&lt;/code&gt;, and so on.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s test our function on &lt;a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses" title="Bitcoin wiki: Bitcoin addresses"&gt;this Bitcoin wiki example&lt;/a&gt;:&lt;/p&gt;
 &lt;ul&gt;
  &lt;li&gt;private key: &lt;code&gt;18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;public address: &lt;code&gt;16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p&gt;We save the code to the file &lt;code&gt;priv2addr.rkt&lt;/code&gt; and use &lt;a href="http://docs.racket-lang.org/xrepl/index.html"&gt;Racket&amp;rsquo;s extended REPL&lt;/a&gt;:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "priv2addr.rkt")
-&amp;gt; (define priv-key "18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725")
-&amp;gt; (priv-key-&amp;gt;addr priv-key)
"16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM"&lt;/code&gt;&lt;/pre&gt;
 &lt;h3 id="a-multibit-wallet"&gt;A MultiBit Wallet&lt;/h3&gt;
 &lt;p&gt;Now let&amp;rsquo;s test our function on a real private key. I created a new wallet in MultiBit and it generated address &lt;code&gt;1G9dbCmxtbaBQACVgcHWHJgyr8ZNCiVL9j&lt;/code&gt;. I then exported the private key associated with this address into a file. Here&amp;rsquo;s the contents of that file:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;# KEEP YOUR PRIVATE KEYS SAFE !
# Anyone who can read this file can spend your bitcoin.
#
# Format:
#   &amp;lt;Base58 encoded private key&amp;gt;[&amp;lt;whitespace&amp;gt;[&amp;lt;key createdAt&amp;gt;]]
#
#   The Base58 encoded private keys are the same format as
#   produced by the Satoshi client/ sipa dumpprivkey utility.
#
#   Key createdAt is in UTC format as specified by ISO 8601
#   e.g: 2011-12-31T16:42:00Z . The century, 'T' and 'Z' are mandatory
#
L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe` 2014-03-10T06:12:28Z
# End of private keys&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Let&amp;rsquo;s see if our function can convert this private key to its public address.&lt;/p&gt;
 &lt;ul&gt;
  &lt;li&gt;private key: &lt;code&gt;L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;public address: &lt;code&gt;1G9dbCmxtbaBQACVgcHWHJgyr8ZNCiVL9j&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p&gt;The key is in base&amp;ndash;58 so we need convert to hex first.&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "priv2addr.rkt" "base58.rkt")
-&amp;gt; (define priv/base58 "L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe")
-&amp;gt; (define priv/hex (base58-str-&amp;gt;hex-str priv/base58))
-&amp;gt; (priv-key-&amp;gt;addr priv/hex)
"1GoZxLR83RfoZeqzNSdTZuEb4vHAc6zFfc"
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Hmm, we get the wrong address! Querying the private key at &lt;a href="http://bitaddress.org"&gt;bitaddress.org&lt;/a&gt; reveals that the private key is&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;in &lt;a href="https://en.bitcoin.it/wiki/Wallet_import_format" title="Wallet import format"&gt;Wallet Import Format (WIF)&lt;/a&gt;, and&lt;/li&gt;
  &lt;li&gt;in &lt;a href="https://en.bitcoin.it/wiki/Private_key"&gt;&amp;ldquo;compressed&amp;rdquo; form&lt;/a&gt;.&lt;/li&gt;&lt;/ol&gt;
 &lt;p&gt;&amp;ldquo;Compressed&amp;rdquo; is in quotes because the private key itself is not compressed, but rather has a flag that indicates that the public key should be compressed. Here&amp;rsquo;s the relevant details of Wallet Import Format:&lt;/p&gt;
 &lt;p&gt;&amp;ldquo;Uncompressed&amp;rdquo; WIF private key:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;0x80 + 32 byte raw private key + 4 byte checksum
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;&amp;ldquo;Compressed&amp;rdquo; WIF private key:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;0x80 + 32 byte raw private key + 0x01 + 4 byte checksum
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The &lt;code&gt;0x80&lt;/code&gt; prefix indicates an address on the main Bitcoin blockchain (as opposed to the testnet). The &amp;ldquo;compressed&amp;rdquo; form has an extra &lt;code&gt;0x01&lt;/code&gt; byte before the checksum.&lt;/p&gt;
 &lt;h3 id="wif-checksum-checking"&gt;WIF Checksum Checking&lt;/h3&gt;
 &lt;p&gt;Before converting the WIF private key to an address, let&amp;rsquo;s first write a function that checks the checksum for a WIF private key. To do this we need a predicate that determines if the compressed flag is set in a WIF private key:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;;; wif is in base58
(define (wif-compressed? wif)
  (define len (string-length wif))
  (when (not (or (= len 51) (= len 52)))
    (error 'wif-compressed? "invalid WIF: ~a\n" wif))
  (define c (string-ref wif 0))
  (or (char=? c #\K) (char=? c #\L)))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;A WIF private key with the comrpession flag set begins with a &lt;code&gt;K&lt;/code&gt; or &lt;code&gt;L&lt;/code&gt; and &lt;code&gt;wif-compressed?&lt;/code&gt; checks for this.&lt;/p&gt;
 &lt;p&gt;Next we define a predicate that verifies a WIF private key&amp;rsquo;s checksum. The checksum is again computed with a double SHA&amp;ndash;256.&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;;; splits wif into prefix + checksum
;; wif is in base58 but results are in  hex
(define (wif-split-checksum wif)
  (define wif/hex (base58-str-&amp;gt;hex-str wif))
  (cond [(wif-compressed? wif)
         (values (substring wif/hex 0 68) (substring wif/hex 68 76))]
        [else
         (values (substring wif/hex 0 66) (substring wif/hex 66 74))]))

(define (hex=? str1 str2) (string=? (string-upcase str1) (string-upcase str2)))

;; wif is in base58
(define (wif-checksum-ok? wif)
  (define-values (wif-prefix wif-checksum) (wif-split-checksum wif))
  (hex=? wif-checksum (compute-checksum wif-prefix)))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;First, &lt;code&gt;wif-checksum-ok?&lt;/code&gt; calls &lt;code&gt;wif-split-checksum&lt;/code&gt; to split a WIF private key into a prefix and a checksum. Then, &lt;code&gt;wif-checksum-ok?&lt;/code&gt; computes a double SHA&amp;ndash;256 on the prefix and verifies that it matches the checksum.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s try these functions on our example:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (define wif/comp "L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe")
-&amp;gt; (wif-checksum-ok? wif/comp)
#t
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;We can also try on the uncompressed WIF private key, which according to &lt;a href="https://www.bitaddress.org"&gt;bitaddress.org&lt;/a&gt;, is &lt;code&gt;5KDwznXNT8sJbhtYheFNB1ho9Yb69hfJGgmTkW9cNVBr7LxFEje&lt;/code&gt;.&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;-&amp;gt; (define wif/uncomp "5KDwznXNT8sJbhtYheFNB1ho9Yb69hfJGgmTkW9cNVBr7LxFEje")
-&amp;gt; (wif-checksum-ok? wif/uncomp)
#t
&lt;/code&gt;&lt;/pre&gt;
 &lt;h3 id="from-wif-private-key-to-address"&gt;From WIF Private Key to Address&lt;/h3&gt;
 &lt;p&gt;To convert from a WIF private key to an address, we need to:&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;decide whether the compression flag is set in the WIF private key,&lt;/li&gt;
  &lt;li&gt;extract the raw private key, and&lt;/li&gt;
  &lt;li&gt;compute either an uncompressed or compressed Bitcoin address.&lt;/li&gt;&lt;/ol&gt;
 &lt;p&gt;We have already defined code for step 1. For step 2, we just drop all prefixes and checksums from the WIF private key:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;;; wif is in base58, priv key is in hex
(define (wif-&amp;gt;priv-key wif) (substring (base58-str-&amp;gt;hex-str wif) 2 66))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;To verify that we properly extract the raw private key, let&amp;rsquo;s check the hash160 (using &lt;code&gt;hash160/hex&lt;/code&gt; defined above) of our running example, which &lt;a href="https://blockchain.info/address/1G9dbCmxtbaBQACVgcHWHJgyr8ZNCiVL9j" title="blockchain.info 1G9dbCmxtbaBQACVgcHWHJgyr8ZNCiVL9j"&gt;blockchain.info reports to be&lt;/a&gt; &lt;code&gt;a62bc20c511af7160a6150a72042b3fff8a86646&lt;/code&gt;. The &lt;code&gt;^&lt;/code&gt; token in the &lt;a href="http://docs.racket-lang.org/xrepl/index.html"&gt;Racket XREPL&lt;/a&gt; is bound to the last printed value.&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "priv2addr.rkt" "priv2pub.rkt")
-&amp;gt; (define wif "L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe")
-&amp;gt; (wif-&amp;gt;priv-key wif)
"B96CA0C6390D4734C80A44ECD4ACEF21E2886BA250EC1D8CF461F1C94FAE6EA9"
-&amp;gt; (priv-key-&amp;gt;pub-key/compressed ^)
"036eef34887c91e2ed2815de2192bd541867708bb1c7434cd571073ddecaaafc42"
-&amp;gt; (hash160/hex ^)
"a62bc20c511af7160a6150a72042b3fff8a86646"&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Note that here we know that the compression flag in the WIF private key is set so we use &lt;code&gt;priv-key-&amp;gt;pub-key/compressed&lt;/code&gt;, &lt;a href="http://www.lostintransaction.com/blog/2014/03/14/computing-a-bitcoin-address-part-1-private-to-public-key/" title="Computing a Bitcoin Address, Part 1: Private to Public Key"&gt;defined in a previous post&lt;/a&gt;, to get the compressed public key.&lt;/p&gt;
 &lt;p&gt;For step 3, we already defined &lt;code&gt;priv-key-&amp;gt;addr&lt;/code&gt; above, which computes an uncompressed address, so we just need a version that computes a compressed address. Here&amp;rsquo;s &lt;code&gt;priv-key-&amp;gt;addr/compressed&lt;/code&gt;, which uses &lt;code&gt;priv-key-&amp;gt;pub-key/compressed&lt;/code&gt;:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;;; computes base58 addr from compressed (hex) priv key
(define priv-key-&amp;gt;addr/compressed
  (compose hex-str-&amp;gt;base58-str
           add-checksum
           add-version0
           hash160/hex
           priv-key-&amp;gt;pub-key/compressed))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Finally, we can define &lt;code&gt;wif-&amp;gt;addr&lt;/code&gt;, which converts a WIF private key to a Bitcoin address:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;;; wif and addr are base58
(define (wif-&amp;gt;addr wif)
  (define priv (wif-&amp;gt;priv-key wif))
  (if (wif-compressed? wif)
      (priv-key-&amp;gt;addr/compressed priv)
      (priv-key-&amp;gt;addr priv)))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Let&amp;rsquo;s test this code with the MultiBit wallet example from above. Here are the WIF private keys, both with compressed flag set and unset, and their associated public addresses:&lt;/p&gt;
 &lt;ul&gt;
  &lt;li&gt;WIF private key, compressed: &lt;code&gt;L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;public address, compressed: &lt;code&gt;1G9dbCmxtbaBQACVgcHWHJgyr8ZNCiVL9j&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;WIF private key, uncompressed: &lt;code&gt;5KDwznXNT8sJbhtYheFNB1ho9Yb69hfJGgmTkW9cNVBr7LxFEje&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;public address, uncompressed: &lt;code&gt;15YzfXwEg5STm3GtEh87LAyzNbpVpdx5eN&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p&gt;Let&amp;rsquo;s test that our code gives the expected results:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "priv2addr.rkt")
-&amp;gt; (define wif/comp "L3S9k3w3gMj2gBUWvPQQTC74giRTjQU3EEXF51f17qQskgJsF7Qe")
-&amp;gt; (wif-&amp;gt;addr wif/comp)
"1G9dbCmxtbaBQACVgcHWHJgyr8ZNCiVL9j"
-&amp;gt; (define wif/uncomp "5KDwznXNT8sJbhtYheFNB1ho9Yb69hfJGgmTkW9cNVBr7LxFEje")
-&amp;gt; (wif-&amp;gt;addr wif/uncomp)
"15YzfXwEg5STm3GtEh87LAyzNbpVpdx5eN"
&lt;/code&gt;&lt;/pre&gt;
 &lt;h3 id="software"&gt;Software&lt;/h3&gt;
 &lt;p&gt;All the code from this post &lt;a href="http://www.lostintransaction.com/code/priv2addr.rkt"&gt;is available here&lt;/a&gt;. In this post, I&amp;rsquo;m using Racket 6.0.0.3, running in Debian 7.0.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Computing a Bitcoin Address, Part 3: Base58Check Encoding</title>
   <link>http://www.lostintransaction.com/blog/2014/03/18/computing-a-bitcoin-address-part-3-base58check-encoding/?utm_source=Bitcoin-addresses&amp;utm_medium=RSS</link>
   <guid>urn:http-www-lostintransaction-com:-blog-2014-03-18-computing-a-bitcoin-address-part-3-base58check-encoding</guid>
   <pubDate>Tue, 18 Mar 2014 05:44:11 UTC</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.lostintransaction.com/img/1x1.gif?utm_source=Bitcoin-addresses&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2014%2F03%2F18%2Fcomputing-a-bitcoin-address-part-3-base58check-encoding%2F" height="1" width="1" /&gt;
 &lt;p&gt;In previous posts, we looked at &lt;a href="http://www.lostintransaction.com/blog/2014/03/14/computing-a-bitcoin-address-part-1-private-to-public-key/" title="Computing a Bitcoin Address, Part 1: Private to Public Key"&gt;computing a Bitcoin public key from a private key&lt;/a&gt;, and &lt;a href="http://www.lostintransaction.com/blog/2014/03/15/computing-a-bitcoin-address-part-2-public-key-to-hex-address/" title="Computing a Bitcoin Address, Part 2: Public Key to (Hex) Address"&gt;computing a Bitcoin address from a public key&lt;/a&gt;. However, these posts dealt with keys and addresses in hexadecimal (hex) form, which is not the representation familiar to most Bitcoin users. Bitcoin addresses more commonly are encoded as &lt;a href="https://en.bitcoin.it/wiki/Base58Check_encoding" title="Base58Check encoding"&gt;Base58Check&lt;/a&gt; strings, which we explore in this post.&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;This is the third post in a four-part series titled &amp;ldquo;Computing a Bitcoin Address&amp;rdquo;. Here are all the articles in the series:&lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;Part 1: &lt;a href="http://www.lostintransaction.com/blog/2014/03/14/computing-a-bitcoin-address-part-1-private-to-public-key/"&gt;Private to Public Key&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;Part 2: &lt;a href="http://www.lostintransaction.com/blog/2014/03/15/computing-a-bitcoin-address-part-2-public-key-to-hex-address/"&gt;Public Key to (Hex) Address&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;Part 3: &lt;a href="http://www.lostintransaction.com/blog/2014/03/18/computing-a-bitcoin-address-part-3-base58check-encoding/"&gt;Base58Check Encoding&lt;/a&gt; (this post)&lt;/li&gt;
   &lt;li&gt;Part 4: &lt;a href="http://www.lostintransaction.com/blog/2014/04/09/computing-a-bitcoin-address-part-4-wallet-import-format-wif/"&gt;Wallet Import Format (WIF)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
 &lt;p&gt;The &lt;a href="https://github.com/bitcoin/bitcoin/blob/f76c122e2eac8ef66f69d142231bd33c88a24c50/src/base58.h#L7-L12" title="src/base58.h"&gt;Bitcoin reference code&lt;/a&gt; provides the following rationale for using Base58Check (instead of a more common base&amp;ndash;64 encoding):&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;// Why base-58 instead of standard base-64 encoding?
// - Don't want 0OIl characters that look the same in some fonts and
//      could be used to create visually identical looking account numbers.
// - A string with non-alphanumeric characters is not as easily accepted as an account number.
// - E-mail usually won't line-break if there's no punctuation to break at.
// - Double-clicking selects the whole number as one word if it's all alphanumeric.&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Essentially, the goal with Base58Check is to make it easier for humans to read and handle Bitcoin addresses. In this post, instead of the C++ used in the Bitcoin reference, we implement Base58Check encoding and decoding using &lt;a href="http://racket-lang.org"&gt;Racket&lt;/a&gt;, which lets us avoid the hassle of dealing with &lt;code&gt;BIGNUM&lt;/code&gt; numbers.&lt;/p&gt;
 &lt;h3 id="encoding"&gt;Encoding&lt;/h3&gt;
 &lt;p&gt;To convert a hex string to Base58Check, we need to repeatedly perform modulo and division operations on the string. However, Racket doesn&amp;rsquo;t come with modulo and division operations on hex strings so it&amp;rsquo;ll be easier to convert to a base&amp;ndash;10 number first. Here&amp;rsquo;s a Racket function &lt;code&gt;hex-str-&amp;gt;num&lt;/code&gt; that converts from hex to base&amp;ndash;10.&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define HEX-CHARS "0123456789ABCDEF")

; case-insensitive character equality operator
(define (anycase=? c1 c2) (char=? (char-upcase c1) (char-upcase c2)))

; convert hex digit to base-10 number
(define (hex-char-&amp;gt;num ch)
  (define index 
    (for/first ([(c n) (in-indexed HEX-CHARS)] #:when (anycase=? c ch)) n))
  (or index (error 'hex-char-&amp;gt;num "invalid hex char: ~a\n" ch)))
      
; convert hex string to base-10 number
(define (hex-str-&amp;gt;num hstr)
  (for/fold ([num 0]) ([ch (in-string hstr)]) 
    (+ (* 16 num) (hex-char-&amp;gt;num ch))))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The &lt;code&gt;fold/for&lt;/code&gt; form defines an intermediate result &lt;code&gt;num&lt;/code&gt; that is initially 0 and then for each hex character in the input &lt;code&gt;hstr&lt;/code&gt;, multiplies the intermediate result by 16 and adds to it the base&amp;ndash;10 representation of that hex character, as computed by &lt;code&gt;hex-char-&amp;gt;num&lt;/code&gt;. The &lt;code&gt;hex-char-&amp;gt;num&lt;/code&gt; function converts a hex character to a number by computing the position of the character in the &lt;code&gt;HEX-CHARS&lt;/code&gt; constant string (or throws an error if the input character is not valid hex). Note that &lt;code&gt;hex-char-&amp;gt;num&lt;/code&gt; accepts both upper and lowercase hex characters, and uses the case-insensitive &lt;code&gt;anycase=?&lt;/code&gt; to compare characters for equality.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s see what the (hex) Bitcoin address from &lt;a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses" title="Technical background of version 1 Bitcoin addresses"&gt;this Bitcoin Wiki article&lt;/a&gt; (step 8) is in base&amp;ndash;10 (the above code is saved to a file &lt;code&gt;base58.rkt&lt;/code&gt; with &lt;code&gt;hex-str-&amp;gt;num&lt;/code&gt; exported):&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "base58.rkt")
-&amp;gt; (hex-str-&amp;gt;num "00010966776006953D5567439E5E39F86A0D273BEED61967F6")
25420294593250030202636073700053352635053786165627414518&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;We can now use standard (base&amp;ndash;10) modulo and divide operations to convert from base&amp;ndash;10 to Base58Check. Here&amp;rsquo;s an initial attempt at converting to base&amp;ndash;58:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define BASE58-CHARS "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")

; convert base10 number to base58 digit
(define (num-&amp;gt;base58-char n)
  (when (or (&amp;lt; n 0) (&amp;gt;= n 58))
    (error 'num-&amp;gt;base58-char "cannot convert to base-58: ~a\n" n))
  (string-ref BASE58-CHARS n))
  
;; convert base10 number to base58check string (first attempt)
(define (num-&amp;gt;base58-str.v0 n)
  (list-&amp;gt;string
    (reverse
      (let loop ([n n])
        (define-values (q r) (quotient/remainder n 58))
        (if (zero? q)
            (list (num-&amp;gt;base58-char r))
            (cons (num-&amp;gt;base58-char r) (loop q)))))))

; convert hex string to base58check string (first attempt)
(define (hex-str-&amp;gt;base58-str.v0 hstr) 
  (num-&amp;gt;base58-str.v0 (hex-str-&amp;gt;num hstr)))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The &lt;code&gt;hex-str-&amp;gt;base58-str.v0&lt;/code&gt; function first converts its hex string input to a base&amp;ndash;10 number using the previously defined &lt;code&gt;hex-str-&amp;gt;num&lt;/code&gt;. It then calls &lt;code&gt;num-&amp;gt;base58-str.v0&lt;/code&gt; to convert the base&amp;ndash;10 number to base&amp;ndash;58. The &lt;code&gt;num-&amp;gt;base58-str.v0&lt;/code&gt; function repeatedly performs &lt;code&gt;modulo 58&lt;/code&gt; and integer division operations on the given number &amp;mdash; the &lt;code&gt;quotient/remainder&lt;/code&gt; Racket function conveniently performs both these operations in one step. Passing the &lt;code&gt;modulo&lt;/code&gt; result (ie the remainder &lt;code&gt;r&lt;/code&gt;) to &lt;code&gt;num-&amp;gt;base58-char&lt;/code&gt; gives in the next base&amp;ndash;58 digit and the division result (ie the quotient &lt;code&gt;q&lt;/code&gt;) is used in the next &lt;code&gt;loop&lt;/code&gt; iteration. The end result of the &lt;code&gt;loop&lt;/code&gt; is a list of base&amp;ndash;58 digits. The digits are computed in reverse order so they are reversed before converting back to a string.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s test our code. Following &lt;a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses" title="Technical background of version 1 Bitcoin addresses"&gt;the same example from the Bitcoin wiki&lt;/a&gt;, the hex address &lt;code&gt;00010966776006953D5567439E5E39F86A0D273BEED61967F6&lt;/code&gt; is &lt;code&gt;16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM&lt;/code&gt; in Base58Check.&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "base58.rkt")
-&amp;gt; (hex-str-&amp;gt;base58-str.v0 "00010966776006953D5567439E5E39F86A0D273BEED61967F6")
"6UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM"&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Our initial attempt produces the wrong answer! What happened? It turns out that the leading zeros in a hex string matter when the string is viewed as a Bitcoin address. But when we converted to base&amp;ndash;10, the leading zeros got dropped since they don&amp;rsquo;t matter for numbers.&lt;/p&gt;
 &lt;p&gt;To complete the base&amp;ndash;58 conversion, following the Bitcoin reference code, we count the number of leading zeros in the hex string and add one leading &amp;lsquo;1&amp;rsquo; character to the base&amp;ndash;58 address for each leading zero &lt;em&gt;byte&lt;/em&gt; in the hex string, ie, we add one leading base&amp;ndash;58 &amp;lsquo;1&amp;rsquo; per two leading hex &amp;rsquo;0&amp;rsquo;s. Here&amp;rsquo;s an updated conversion function:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define (count-leading-zeros str)
  (for/sum ([c (in-string str)] #:break (not (char=? #\0 c))) 1))

; converts base10 number to base58check string
(define (num-&amp;gt;base58-str n) 
  (if (zero? n) "" (num-&amp;gt;base58-str.v0 n)))
  
; converts hex string to base58check string
(define (hex-str-&amp;gt;base58-str hstr)
  (define num-leading-ones (quotient (count-leading-zeros hstr) 2))
  (define leading-ones (make-string num-leading-ones #\1))
  (string-append leading-ones (num-&amp;gt;base58-str (hex-str-&amp;gt;num hstr))))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Trying our example again yields the expected result:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "base58.rkt")
-&amp;gt; (hex-str-&amp;gt;base58-str "00010966776006953D5567439E5E39F86A0D273BEED61967F6")
"16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM"&lt;/code&gt;&lt;/pre&gt;
 &lt;h3 id="decoding"&gt;Decoding&lt;/h3&gt;
 &lt;p&gt;To convert from base&amp;ndash;58 back to hex, we reverse the above steps. We first convert from base&amp;ndash;58 to base&amp;ndash;10 and then from base&amp;ndash;10 to hex.&lt;/p&gt;
 &lt;p&gt;The conversion from base&amp;ndash;58 strings into base&amp;ndash;10 numbers looks a lot like the &lt;code&gt;hex-str-&amp;gt;num&lt;/code&gt; and &lt;code&gt;hex-char-&amp;gt;num&lt;/code&gt; functions we defined above:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;; converts base58check digit to base10 number
(define (base58-char-&amp;gt;num ch)
  (define index
    (for/first ([(c n) (in-indexed BASE58-CHARS)] #:when (char=? c ch)) n))
  (or index (error 'base58-char-&amp;gt;num "invalid base58 char: ~a\n" ch)))

; converts base58check string to base10 number
(define (base58-str-&amp;gt;num b58str)
  (for/fold ([num 0]) ([ch (in-string b58str)])
    (+ (* 58 num) (base58-char-&amp;gt;num ch))))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Note that unlike &lt;code&gt;hex-char-&amp;gt;num&lt;/code&gt;, &lt;code&gt;base58-char-&amp;gt;num&lt;/code&gt; is case-sensitive.&lt;/p&gt;
 &lt;p&gt;Similarly, the conversion from base&amp;ndash;10 to hex looks mostly like the &lt;code&gt;num-&amp;gt;base58-str&lt;/code&gt; function above:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;; convert base10 number to hex digit
(define (num-&amp;gt;hex-char n)
  (when (or (&amp;lt; n 0) (&amp;gt;= n 16))
    (error 'num-&amp;gt;hex-char "cannot convert to hex: ~a\n" n))
  (string-ref HEX-CHARS n))

; convert base10 number to hex string
(define (num-&amp;gt;hex-str n)
  (if (zero? n) ""
      (list-&amp;gt;string
        (reverse
          (let loop ([n n])
            (define-values (q r) (quotient/remainder n 16))
            (if (zero? q)
                (list (num-&amp;gt;hex-char r))
                (cons (num-&amp;gt;hex-char r) (loop q))))))))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Putting it all together gives us a &lt;code&gt;base58-str-&amp;gt;hex-str&lt;/code&gt; decoding function. This time we don&amp;rsquo;t forget to count the leading digits, &amp;lsquo;1&amp;rsquo;s here instead of &amp;rsquo;0&amp;rsquo;s. Note that we add an extra &amp;rsquo;0&amp;rsquo; to odd-length hex strings so the result is always byte-aligned.&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define (count-leading-ones str)
  (for/sum ([c (in-string str)] #:break (not (char=? #\1 c))) 1))
  
; converts a base58check string to a hex string
(define (base58-str-&amp;gt;hex-str b58str)
  (define hex-str/no-leading-zeros (num-&amp;gt;hex-str (base58-str-&amp;gt;num b58str)))
  (define num-leading-ones (count-leading-ones b58str))
  (define num-leading-zeros
    (if (even? (string-length hex-str/no-leading-zeros))
        (* num-leading-ones 2)
        (add1 (* num-leading-ones 2)))) ; add extra 0 to byte-align
  (define leading-zeros (make-string num-leading-zeros #\0))
  (string-append leading-zeros hex-str/no-leading-zeros))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;And trying it on our [example][bwik:addr] returns the expected results (the &lt;code&gt;^&lt;/code&gt; token in the &lt;a href="http://docs.racket-lang.org/xrepl/index.html"&gt;Racket Extended REPL&lt;/a&gt; is bound to the last printed value):&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "base58.rkt")
-&amp;gt; (define addr/hex "00010966776006953D5567439E5E39F86A0D273BEED61967F6")
-&amp;gt; (hex-str-&amp;gt;base58-str addr/hex)
"16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM"
-&amp;gt; (define addr/base58 ^)
-&amp;gt; (base58-str-&amp;gt;hex-str ^)
"00010966776006953D5567439E5E39F86A0D273BEED61967F6"
-&amp;gt; (equal? addr/hex ^)
#t
-&amp;gt; (equal? (base58-str-&amp;gt;hex-str (hex-str-&amp;gt;base58-str addr/hex)) addr/hex)
#t
-&amp;gt; (equal? (hex-str-&amp;gt;base58-str (base58-str-&amp;gt;hex-str addr/base58)) addr/base58)
#t&lt;/code&gt;&lt;/pre&gt;
 &lt;h3 id="software"&gt;Software&lt;/h3&gt;
 &lt;p&gt;All the code from this post &lt;a href="http://www.lostintransaction.com/code/base58.rkt"&gt;is available here&lt;/a&gt;. Examples were executed with Racket 6.0.0.3, running in Debian 7.0.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Computing a Bitcoin Address, Part 2: Public Key to (Hex) Address</title>
   <link>http://www.lostintransaction.com/blog/2014/03/15/computing-a-bitcoin-address-part-2-public-key-to-hex-address/?utm_source=Bitcoin-addresses&amp;utm_medium=RSS</link>
   <guid>urn:http-www-lostintransaction-com:-blog-2014-03-15-computing-a-bitcoin-address-part-2-public-key-to-hex-address</guid>
   <pubDate>Sat, 15 Mar 2014 04:09:45 UTC</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.lostintransaction.com/img/1x1.gif?utm_source=Bitcoin-addresses&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2014%2F03%2F15%2Fcomputing-a-bitcoin-address-part-2-public-key-to-hex-address%2F" height="1" width="1" /&gt;
 &lt;p&gt;In a previous post, we &lt;a href="http://www.lostintransaction.com/blog/2014/03/14/computing-a-bitcoin-address-part-1-private-to-public-key/" title="Computing a Bitcoin Address, Part 1: Private to Public Key"&gt;derived a Bitcoin public key from a private key&lt;/a&gt;. This post explores how to convert that public key into a (hexadecimal) Bitcoin address. I&amp;rsquo;ll be using &lt;a href="http://racket-lang.org"&gt;the Racket language&lt;/a&gt; to help me.&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;This is the second post in a four-part series titled &amp;ldquo;Computing a Bitcoin Address&amp;rdquo;. Here are all the articles in the series:&lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;Part 1: &lt;a href="http://www.lostintransaction.com/blog/2014/03/14/computing-a-bitcoin-address-part-1-private-to-public-key/"&gt;Private to Public Key&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;Part 2: &lt;a href="http://www.lostintransaction.com/blog/2014/03/15/computing-a-bitcoin-address-part-2-public-key-to-hex-address/"&gt;Public Key to (Hex) Address&lt;/a&gt; (this post)&lt;/li&gt;
   &lt;li&gt;Part 3: &lt;a href="http://www.lostintransaction.com/blog/2014/03/18/computing-a-bitcoin-address-part-3-base58check-encoding/"&gt;Base58Check Encoding&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;Part 4: &lt;a href="http://www.lostintransaction.com/blog/2014/04/09/computing-a-bitcoin-address-part-4-wallet-import-format-wif/"&gt;Wallet Import Format (WIF)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
 &lt;p&gt;To convert from a public key to a Bitcoin address, we need an implementation of the &lt;a href="http://en.wikipedia.org/wiki/SHA-2" title="Wikipedia: SHA-2"&gt;SHA&amp;ndash;256&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/RIPEMD" title="Wikipedia: RIPEMD"&gt;RIPEMD&amp;ndash;160&lt;/a&gt; hash functions. Racket doesn&amp;rsquo;t come with these functions but we can easily call to OpenSSL&amp;rsquo;s implementation of these functions via Racket&amp;rsquo;s C &lt;a href="http://docs.racket-lang.org/foreign/index.html" title="Racket FFI"&gt;FFI&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;Conveniently, the standard Racket distribution already defines &lt;a href="https://github.com/plt/racket/blob/master/racket/collects/openssl/libcrypto.rkt" title="Racket source: libcrypto.rkt"&gt;a hook into the &lt;code&gt;libcrypto&lt;/code&gt; library&lt;/a&gt;, also named &lt;code&gt;libcrypto&lt;/code&gt;. Racket comes with wrapper functions for some &lt;code&gt;libcrypto&lt;/code&gt; C functions, but not &lt;code&gt;SHA256&lt;/code&gt; or &lt;code&gt;RIPEMD160&lt;/code&gt; so let&amp;rsquo;s create those.&lt;/p&gt;
 &lt;p&gt;Here&amp;rsquo;s the header for the &lt;a href="http://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=crypto/sha/sha.h;h=8a6bf4bbbb1dbef37869fc162ce1c2cacfebeb1d;hb=46ebd9e3bb623d3c15ef2203038956f3f7213620#l155" title="OpenSSL source: crypto/sha/sha.h"&gt;&lt;code&gt;SHA256&lt;/code&gt; C function&lt;/a&gt;:&lt;/p&gt;
 &lt;pre class="brush: C"&gt;&lt;code&gt;unsigned char *SHA256( const unsigned char *d, size_t n, unsigned char *md );&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;We use the Racket &lt;a href="http://docs.racket-lang.org/foreign/Loading_Foreign_Libraries.html?q=get-ffi-obj#%28def._%28%28lib._ffi%2Funsafe..rkt%29._get-ffi-obj%29%29" title="Racket docs: get-ffi-obj"&gt;&lt;code&gt;get-ffi-obj&lt;/code&gt;&lt;/a&gt; function to create a Racket wrapper for &lt;code&gt;SHA256&lt;/code&gt;. Here&amp;rsquo;s a Racket &lt;code&gt;sha256&lt;/code&gt; function that calls the C &lt;code&gt;SHA256&lt;/code&gt; function:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define SHA256-DIGEST-LEN 32) ; bytes

(define sha256
  (get-ffi-obj 'SHA256 libcrypto
    (_fun [input     : _bytes]
          [input-len : _ulong = (bytes-length input)]
          [output    : (_bytes o SHA256-DIGEST-LEN)]
          -&amp;gt; (_bytes o SHA256-DIGEST-LEN))))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The first argument to &lt;code&gt;get-ffi-obj&lt;/code&gt; is the name of the C function and the second argument is the hook into the appropriate library. The third argument is the type, which specifies how to mediate between Racket and C values. &lt;a href="http://docs.racket-lang.org/foreign/foreign_procedures.html?q=_fun#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29" title="Racket docs: _fun"&gt;&lt;code&gt;_fun&lt;/code&gt;&lt;/a&gt; is the function type and in this case the function has three arguments (each delimited with brackets by convention).&lt;/p&gt;
 &lt;p&gt;Examining the types of the arguments:&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;
   &lt;p&gt;The first argument to the &lt;code&gt;SHA256&lt;/code&gt; C function is an array of input bytes. Accordingly, we give &lt;code&gt;get-ffi-obj&lt;/code&gt; a &lt;code&gt;_bytes&lt;/code&gt; type for this argument.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;The second argument is the length of the input byte array. The &lt;code&gt;=&lt;/code&gt; and the expression following it describe how to calculate this argument automatically. Thus a caller of &lt;code&gt;sha256&lt;/code&gt; does not provide this argument.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;The third argument is the output byte array. The &lt;code&gt;o&lt;/code&gt; indicates a return pointer and is followed by the expected length of the output array, which should be 32 bytes here. We define a constant &lt;code&gt;SHA256-DIGEST-LEN&lt;/code&gt; which is analogous to &lt;a href="http://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=crypto/sha/sha.h;h=8a6bf4bbbb1dbef37869fc162ce1c2cacfebeb1d;hb=46ebd9e3bb623d3c15ef2203038956f3f7213620#l133" title="OpenSSL source: crypto/sha/sha.h"&gt;the &lt;code&gt;SHA256_DIGEST_LENGTH&lt;/code&gt; constant&lt;/a&gt; in the C library.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
 &lt;p&gt;Similarly, here&amp;rsquo;s a definition for a Racket &lt;code&gt;ripemd160&lt;/code&gt; function:&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define RIPEMD160-DIGEST-LEN 20) ; bytes

; from crypto/ripemd/ripemd.h:
;  unsigned char *RIPEMD160(const unsigned char *d, size_t n, unsigned char *md);
(define ripemd160
  (get-ffi-obj 'RIPEMD160 libcrypto
    (_fun [input     : _bytes]
          [input-len : _ulong = (bytes-length input)]
          [output    : (_bytes o RIPEMD160-DIGEST-LEN)]
          -&amp;gt; (_bytes o RIPEMD160-DIGEST-LEN))))&lt;/code&gt;&lt;/pre&gt;
 &lt;h3 id="testing"&gt;Testing&lt;/h3&gt;
 &lt;p&gt;To test our wrapper functions, let&amp;rsquo;s see if we can duplicate &lt;a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses" title="Bitcoin Wiki: Technical background of version 1 Bitcoin addresses"&gt;this example from the Bitcoin wiki&lt;/a&gt;, which shows how to convert a Bitcoin private key into a public address. We covered &lt;a href="http://www.lostintransaction.com/blog/2014/03/14/computing-a-bitcoin-address-part-1-private-to-public-key/" title="Computing a Bitcoin Address, Part 1: Private to Public Key"&gt;how to derive a public key from a private key&lt;/a&gt; in a previous post, so we start with the public key here.&lt;/p&gt;
 &lt;p&gt;For ease of comparison, here&amp;rsquo;s the sequence of expected hashes, copied from the Bitcoin wiki example:&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;public key: &lt;code&gt;0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;SHA&amp;ndash;256: &lt;code&gt;600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;RIPEMD&amp;ndash;160: &lt;code&gt;010966776006953D5567439E5E39F86A0D273BEE&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;prepend &lt;code&gt;0x00&lt;/code&gt;: &lt;code&gt;00010966776006953D5567439E5E39F86A0D273BEE&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;SHA&amp;ndash;256: &lt;code&gt;445C7A8007A93D8733188288BB320A8FE2DEBD2AE1B47F0F50BC10BAE845C094&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;SHA&amp;ndash;256 (checksum is first 4 bytes): &lt;code&gt;D61967F63C7DD183914A4AE452C9F6AD5D462CE3D277798075B107615C1A8A30&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;step 4 result + checksum = (hex) address: &lt;code&gt;00010966776006953D5567439E5E39F86A0D273BEED61967F6&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
 &lt;p&gt;The hashes are all in hexdecimal form so we extend our hash functions to convert to and from hex strings (&lt;code&gt;bytes-&amp;gt;hex-string&lt;/code&gt; and &lt;code&gt;hex-string-&amp;gt;bytes&lt;/code&gt; are built-in Racket functions):&lt;/p&gt;
 &lt;pre class="brush: racket"&gt;&lt;code&gt;(define (sha256/hex input)
  (bytes-&amp;gt;hex-string (sha256 (hex-string-&amp;gt;bytes input))))
  
(define (ripemd160/hex input)
  (bytes-&amp;gt;hex-string (ripemd160 (hex-string-&amp;gt;bytes input))))&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Now we can duplicate the sequence of hashes from the example, using the &lt;a href="http://www.lostintransaction.com/code/crypto.rkt"&gt;code from this post&lt;/a&gt; (saved to a file &lt;code&gt;crypto.rkt&lt;/code&gt;) and &lt;a href="http://docs.racket-lang.org/xrepl/index.html" title="XREPL"&gt;the Racket (extended) REPL&lt;/a&gt; (the &lt;code&gt;^&lt;/code&gt; token in the REPL represents the last printed result):&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.0.0.3.
-&amp;gt; (require "crypto.rkt")
-&amp;gt; (define pub-key "0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6")
-&amp;gt; (sha256/hex pub-key)
"600ffe422b4e00731a59557a5cca46cc183944191006324a447bdb2d98d4b408"
-&amp;gt; (ripemd160/hex ^)
"010966776006953d5567439e5e39f86a0d273bee"
-&amp;gt; (string-append "00" ^)
"00010966776006953d5567439e5e39f86a0d273bee"
-&amp;gt; (define version0+hash160 ^)
-&amp;gt; (sha256/hex ^)
"445c7a8007a93d8733188288bb320a8fe2debd2ae1b47f0f50bc10bae845c094"
-&amp;gt; (sha256/hex ^)
"d61967f63c7dd183914a4ae452c9f6ad5d462ce3d277798075b107615c1a8a30"
-&amp;gt; (substring ^ 0 8) ; checksum
"d61967f6"
-&amp;gt; (string-append version0+hash160 ^)
"00010966776006953d5567439e5e39f86a0d273beed61967f6"
   &lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The final result is the Bitcoin address from the example, in hexadecimal format. The Bitcoin wiki article performs one more step to convert to &lt;a href="https://en.bitcoin.it/wiki/Base58Check_encoding" title="Bitcoin wiki: Base58Check encoding"&gt;Base58Check encoding&lt;/a&gt;, which is the standard representation for Bitcoin addresses. We&amp;rsquo;ll look at Base58Check encoding in the next post!&lt;/p&gt;
 &lt;h3 id="software"&gt;Software&lt;/h3&gt;
 &lt;p&gt;All the code from this post &lt;a href="http://www.lostintransaction.com/code/crypto.rkt"&gt;is available here&lt;/a&gt;. In this post, I&amp;rsquo;m using OpenSSL 1.0.1e with Racket 6.0.0.3, running in Debian 7.0.&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>